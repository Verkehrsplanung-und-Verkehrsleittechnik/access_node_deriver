class VisumOverlay(object):
    """! IVisum Interface """

    def __init__(self, instance):
        """Contains all attributes"""
        self.Filters = Filters()
        self.IO = IO()
        self.Analysis = Analysis()
        self.Procedures = Procedures()
        self.Lists = Lists()
        self.LicenseManager = LicenseManager()
        self.Net = Net()
        self.Workbench = Workbench()
        self.Messages = Messages()
        self.ScenarioManagement = ScenarioManagement()
        self.Graphic = Graphic()
        self.UserPreferences = UserPreferences()
        self.ErrorFileName = ErrorFileName()
        self.NumNetObjReferences = NumNetObjReferences()
        self.LogFileName = LogFileName()
        self.MessageFileName = MessageFileName()
        self.Embedded = Embedded()
        self.VersionNumber = VersionNumber()
        self.ExportAllNumbersAsDoubles = ExportAllNumbersAsDoubles()
        self.InternalTests = InternalTests()
        self.ProcessId = ProcessId()
        self.TraceFileName = TraceFileName()
        self.InternalApi = InternalApi()
        self.AcceptIncomingDuringOutgoingCalls = AcceptIncomingDuringOutgoingCalls()
        self._home = instance

    def __getattribute__(self, item):
        if item == "_home":
            return object.__getattribute__(self, "_home")
        try:
            return getattr(object.__getattribute__(self, "_home"), item)
        except AttributeError:
            return object.__getattribute__(self, item)

    def __setattr__(self, attr, value):
        try:
            setattr(object.__getattribute__(self, "_home"), attr, value)
        except AttributeError:
            object.__setattr__(self, attr, value)

    def CreateVersionComparisonBasedOnAttributes(self, NewCode, VersionFile, LayoutFile, adaptLinkBars, skipPaths):
        """! Compare attributes with given version
        @param[in] NewCode
        @param[in] VersionFile
        @param[in] LayoutFile
        @param[in] adaptLinkBars
        @param[in] skipPaths """
        pass
    
    def GenerateModelTransferFileUsingTableAttrSelection(self, VersionFile, OutputFile, Layout, reverse, writeLayoutIntoModelTransferFile):
        """! Write differences with given version to a file using Layout
        @param[in] VersionFile
        @param[in] OutputFile
        @param[in] Layout
        @param[in] reverse
        @param[in] writeLayoutIntoModelTransferFile """
        pass
    
    def CreateVersionComparisonBasedOnNetwork(self, NewCode, VersionFile, skipMatrices, adaptLinkBars, skipPaths):
        """! Load given version for comparison
        @param[in] NewCode
        @param[in] VersionFile
        @param[in] skipMatrices
        @param[in] adaptLinkBars
        @param[in] skipPaths """
        pass
    
    def LaunchOnlineHelp(self, HelpID):
        """! Launch online help
        @param[in] HelpID """
        pass
    
    def LoadGlobalLayout(self, FileName):
        """! Save global layout file
        @param[in] FileName """
        pass
    
    def Log(self, Priority, Message):
        """! Post a message of given priority
        @param[in] Priority
        @param[in] Message """
        pass
    
    def PostUserCancelled(self, Message):
        """! Post user cancellation when running as procedure step
        @param[in] Message """
        pass
    
    def CreateVersionComparisonBasedOnAttributesUsingTableAttrSelection(self, NewCode, VersionFile, Layout, adaptLinkBars, skipPaths):
        """! Compare attributes with given version using Layout
        @param[in] NewCode
        @param[in] VersionFile
        @param[in] Layout
        @param[in] adaptLinkBars
        @param[in] skipPaths """
        pass
    
    def ExecuteAddInWithParameterObject(self, AddInID, ParameterObject):
        """! Execute AddIn of given ID using parameter object
        @param[in] AddInID
        @param[in] ParameterObject """
        pass
    
    def SetModule(self, modname, set):
        """! Set or reset a module
        @param[in] modname
        @param[in] set """
        pass
    
    def CreateNetElements(self):
        """! Net Objects """
        pass
    
    def GetRevision(self):
        """! Current SVN Revision  """
        pass
    
    def Ask(self, Priority, defaultLabel, secondLabel, thirdLabel, fourthLabel, question):
        """! Ask for user selection between offered options
        @param[in] Priority
        @param[in] defaultLabel
        @param[in] secondLabel
        @param[in] thirdLabel
        @param[in] fourthLabel
        @param[in] question """
        pass
    
    def CalcSubnetworkWithParameterObject(self, SubnetworkGenerationPara):
        """! Generate subnetwork
        @param[in] SubnetworkGenerationPara """
        pass
    
    def CloseMessageFile(self):
        """! Close message file """
        pass
    
    def SetLogFileName(self, LogFileName, append):
        """! Set log file name
        @param[in] LogFileName
        @param[in] append """
        pass
    
    def SetTraceFile(self, TraceFile, append):
        """! Set Trace file
        @param[in] TraceFile
        @param[in] append """
        pass
    
    def SetMessageFileName(self, MessageFileName, append):
        """! Set message file name
        @param[in] MessageFileName
        @param[in] append """
        pass
    
    def GetPath(self, filetype):
        """! Get Path
        @param[in] filetype """
        pass
    
    def CloneVersionComparison(self, NewCode, VersionFile, TemplateComparisonCode, adaptLinkBars):
        """! Create version comparison based on template
        @param[in] NewCode
        @param[in] VersionFile
        @param[in] TemplateComparisonCode
        @param[in] adaptLinkBars """
        pass
    
    def Sleep(self, milliSeconds):
        """! Pause
        @param[in] milliSeconds """
        pass
    
    def CalcSubnetworkWithParameterFile(self, ParameterFileName):
        """! Generate subnetwork
        @param[in] ParameterFileName """
        pass
    
    def SetLanguage(self, SprachString):
        """! Set language
        @param[in] SprachString """
        pass
    
    def GenerateModelTransferFileBetweenVersionFiles(self, BaseVersionFile, TargetVersionFile, OutputFile, LayoutFile, nonDefaultOnly, nonEmptyTablesOnly, writeLayoutIntoModelTransferFile):
        """! Write differences between two versions to a file
        @param[in] BaseVersionFile
        @param[in] TargetVersionFile
        @param[in] OutputFile
        @param[in] LayoutFile
        @param[in] nonDefaultOnly
        @param[in] nonEmptyTablesOnly
        @param[in] writeLayoutIntoModelTransferFile """
        pass
    
    def GenerateModelTransferFileBetweenVersionFilesUsingTableAttrSelection(self, BaseVersionFile, TargetVersionFile, OutputFile, Layout, writeLayoutIntoModelTransferFile):
        """! Write differences between two versions to a file using Layout
        @param[in] BaseVersionFile
        @param[in] TargetVersionFile
        @param[in] OutputFile
        @param[in] Layout
        @param[in] writeLayoutIntoModelTransferFile """
        pass
    
    def SaveQuickViewLayout(self, LayoutFileName):
        """! Save quick view layout to file
        @param[in] LayoutFileName """
        pass
    
    def GetCurrentLanguage(self):
        """! Get current language """
        pass
    
    def ApplyModelTransferFile(self, TransferFile, AddNetRead):
        """! Apply model transfer file to current network
        @param[in] TransferFile
        @param[in] AddNetRead """
        pass
    
    def LoadPathFile(self, FileName):
        """! Load Path file
        @param[in] FileName """
        pass
    
    def LoadTextFile(self, FileName, inLegend):
        """! Load Text file
        @param[in] FileName
        @param[in] inLegend """
        pass
    
    def RemoveVersionComparison(self, Code):
        """! Remove version comparison
        @param[in] Code """
        pass
    
    def SaveGlobalLayout(self, FileName):
        """! Open global layout file
        @param[in] FileName """
        pass
    
    def StartNetworkMergeModeWithParameterFile(self, paraFile):
        """! Start network merge mode based on parameter file
        @param[in] paraFile """
        pass
    
    def VisumTest(self, TestNumber, FileName, LayoutFile):
        """! Visum test system
        @param[in] TestNumber
        @param[in] FileName
        @param[in] LayoutFile """
        pass
    
    def LoadQuickViewLayout(self, LayoutFileName):
        """! Load quick view layout from file
        @param[in] LayoutFileName """
        pass
    
    def LoadNet(self, NetFile, ReadAdditive, routeSearch, AddNetRead, normalizePolygons, mergeSameCoordPolygonPoints, decimalsForMergeSameCoordPolygonPoints):
        """! Deprecated. Use IO.LoadNet instead (Open network file)
        @param[in] NetFile
        @param[in] ReadAdditive
        @param[in] routeSearch
        @param[in] AddNetRead
        @param[in] normalizePolygons
        @param[in] mergeSameCoordPolygonPoints
        @param[in] decimalsForMergeSameCoordPolygonPoints """
        pass
    
    def SaveNet(self, NetFile, LayoutFile, editableOnly, nonDefaultOnly, activeNetElemsOnly, nonEmptyTablesOnly):
        """! Deprecated. Use IO.SaveNet instead (Save Network)
        @param[in] NetFile
        @param[in] LayoutFile
        @param[in] editableOnly
        @param[in] nonDefaultOnly
        @param[in] activeNetElemsOnly
        @param[in] nonEmptyTablesOnly """
        pass
    
    def GetHelpURL(self):
        """! Current HelpURL """
        pass
    
    def ActivateHandMode(self, Active):
        """! Set hand mode on/off
        @param[in] Active """
        pass
    
    def CloseLogFile(self):
        """! Close log file """
        pass
    
    def StartNetworkMergeMode(self, SourceFile1, SourceFile2, gpaFile, filterFile):
        """! Start network merge mode
        @param[in] SourceFile1
        @param[in] SourceFile2
        @param[in] gpaFile
        @param[in] filterFile """
        pass
    
    def SetAllPaths(self, Path):
        """! Set all paths
        @param[in] Path """
        pass
    
    def ExecuteScriptFile(self, FileName):
        """! Executes script file
        @param[in] FileName """
        pass
    
    def EmptyValue(self):
        """! empty value """
        pass
    
    def InitLegend(self):
        """! InitLegend """
        pass
    
    def CreateSubnetworkGenerationParameters(self):
        """! Create subnetwork generation parameters """
        pass
    
    def ClearNet(self):
        """! Delete the current network """
        pass
    
    def GenerateModelTransferFile(self, VersionFile, OutputFile, LayoutFile, reverse, nonDefaultOnly, nonEmptyTablesOnly, writeLayoutIntoModelTransferFile):
        """! Write differences with given version to a file
        @param[in] VersionFile
        @param[in] OutputFile
        @param[in] LayoutFile
        @param[in] reverse
        @param[in] nonDefaultOnly
        @param[in] nonEmptyTablesOnly
        @param[in] writeLayoutIntoModelTransferFile """
        pass
    
    def LoadVersion(self, VersionFile, convertFromImperial):
        """! Open Version
        @param[in] VersionFile
        @param[in] convertFromImperial """
        pass
    
    def SetErrorFile(self, ErrorFile, append):
        """! Set Error file
        @param[in] ErrorFile
        @param[in] append """
        pass
    
    def GetModule(self, modname):
        """! Get a module
        @param[in] modname """
        pass
    
    def UpdateVersionComparison(self, Code, NewVersionFile):
        """! Update attribute values of version comparison
        @param[in] Code
        @param[in] NewVersionFile """
        pass
    
    def SaveVersion(self, VersionFile):
        """! Save Version
        @param[in] VersionFile """
        pass
    
    def PostOperationResultMessage(self, Message):
        """! Post operation result message when running as procedure step
        @param[in] Message """
        pass
    
    def InitText(self):
        """! InitText """
        pass
    
    def PostPauseProcedureSequence(self, Message):
        """! Post pause when running as procedure step
        @param[in] Message """
        pass
    
    def CalcSubNetwork(self, DSegSet, LineRouteHandling, SubnetworkFileName, CordonZoneNumberingIncremental, CordonZoneNo_startNo, CordonZoneType, UseConnectorLinks, IncludeDemandModel, PrTCordonZoneCreation):
        """! Generate subnetwork
        @param[in] DSegSet
        @param[in] LineRouteHandling
        @param[in] SubnetworkFileName
        @param[in] CordonZoneNumberingIncremental
        @param[in] CordonZoneNo_startNo
        @param[in] CordonZoneType
        @param[in] UseConnectorLinks
        @param[in] IncludeDemandModel
        @param[in] PrTCordonZoneCreation """
        pass
    
    def ExecuteAddInDialog(self, AddInID, ParameterInputString):
        """! Execute AddIn of given ID using parameter string
        @param[in] AddInID
        @param[in] ParameterInputString """
        pass
    
    def PostFailure(self, Message):
        """! Post failure when running as procedure step
        @param[in] Message """
        pass
    
    def ExecuteAddInWithParameterString(self, AddInID, Parameters):
        """! Execute AddIn of given ID using parameter string
        @param[in] AddInID
        @param[in] Parameters """
        pass
    
    def SetPath(self, filetype, Path):
        """! Set Path
        @param[in] filetype
        @param[in] Path """
        pass
    
    def GetTranslatedString(self, origStr):
        """! Translate the given string into current language
        @param[in] origStr """
        pass
    
class Lists:
    """! ILists Interface """

    def __init__(self):
        """Contains all attributes"""
        self.CreateDemandGroupList=CreateDemandGroupList()
        self.CreatePrTPathSearchLegList=CreatePrTPathSearchLegList()
        self.CreateDirLineTransferWalkTimeList=CreateDirLineTransferWalkTimeList()
        self.CreateNodeList=CreateNodeList()
        self.CreateMainLineList=CreateMainLineList()
        self.CreateCountLocationList=CreateCountLocationList()
        self.CreateVehJourneySectionList=CreateVehJourneySectionList()
        self.CreateStopBaseList=CreateStopBaseList()
        self.CreatePathSequenceActivityList=CreatePathSequenceActivityList()
        self.CreateZoneList=CreateZoneList()
        self.CreateCrosswalkTemplateList=CreateCrosswalkTemplateList()
        self.CreateTimeProfileItemList=CreateTimeProfileItemList()
        self.CreateLinkTypeList=CreateLinkTypeList()
        self.CreateCameraPositionList=CreateCameraPositionList()
        self.CreateFareSystemList=CreateFareSystemList()
        self.CreateMatrixList=CreateMatrixList()
        self.CreateLineRouteList=CreateLineRouteList()
        self.CreatePathSequenceList=CreatePathSequenceList()
        self.CreateSysRouteList=CreateSysRouteList()
        self.CreateHolidaysList=CreateHolidaysList()
        self.CreateVehUnitList=CreateVehUnitList()
        self.CreateSharingStationList=CreateSharingStationList()
        self.CreateStopPointTimeTableList=CreateStopPointTimeTableList()
        self.CreateODPairList=CreateODPairList()
        self.CreateNetParaList=CreateNetParaList()
        self.CreateTerritoryBaseList=CreateTerritoryBaseList()
        self.CreateDemandSegmentList=CreateDemandSegmentList()
        self.CreateSectorList=CreateSectorList()
        self.CreateStopPointBaseList=CreateStopPointBaseList()
        self.CreateConnectorList=CreateConnectorList()
        self.CreatePathSequenceSetList=CreatePathSequenceSetList()
        self.CreatePuTPathLegList=CreatePuTPathLegList()
        self.CreateConnectingJourneyList=CreateConnectingJourneyList()
        self.CreatePOIList=CreatePOIList()
        self.CreateMatrixTollList=CreateMatrixTollList()
        self.CreateMainZoneList=CreateMainZoneList()
        self.CreateEmissionList=CreateEmissionList()
        self.CreateLinkList=CreateLinkList()
        self.CreateInformationSignList=CreateInformationSignList()
        self.CreateVehCombList=CreateVehCombList()
        self.CreateLocationList=CreateLocationList()
        self.CreateActChainList=CreateActChainList()
        self.CreateVehJourneyList=CreateVehJourneyList()
        self.CreateTSysList=CreateTSysList()
        self.CreateTSysTransferWalkTimeList=CreateTSysTransferWalkTimeList()
        self.CreateSignalControlList=CreateSignalControlList()
        self.CreateVehJourneyItemList=CreateVehJourneyItemList()
        self.CreateStoryboardList=CreateStoryboardList()
        self.CreateMainNodeList=CreateMainNodeList()
        self.CreatePrTSimulationBasedAssQualityList=CreatePrTSimulationBasedAssQualityList()
        self.CreateChainedUpVehJourneySectionList=CreateChainedUpVehJourneySectionList()
        self.CreateActivityLocationList=CreateActivityLocationList()
        self.CreatePuTTransferList=CreatePuTTransferList()
        self.CreateLineRouteItemList=CreateLineRouteItemList()
        self.CreateScreenlineList=CreateScreenlineList()
        self.CreateTripList=CreateTripList()
        self.CreateDetectorList=CreateDetectorList()
        self.CreatePathList=CreatePathList()
        self.CreateOperatingPeriodList=CreateOperatingPeriodList()
        self.CreatePuTPathSearchLegList=CreatePuTPathSearchLegList()
        self.CreateNodeLegLaneList=CreateNodeLegLaneList()
        self.CreatePuTPathList=CreatePuTPathList()
        self.CreateTripRequestList=CreateTripRequestList()
        self.CreatePersonList=CreatePersonList()
        self.CreateTourList=CreateTourList()
        self.CreateStageList=CreateStageList()
        self.CreatePuTTSysTransferList=CreatePuTTSysTransferList()
        self.CreatePrTIcaAssQualityList=CreatePrTIcaAssQualityList()
        self.CreateDemandStratumList=CreateDemandStratumList()
        self.CreateActivityExecutionList=CreateActivityExecutionList()
        self.CreateTimeProfileList=CreateTimeProfileList()
        self.CreateDeliveryConceptList=CreateDeliveryConceptList()
        self.CreatePrTPathLinkList=CreatePrTPathLinkList()
        self.CreateGeometryTemplateList=CreateGeometryTemplateList()
        self.CreateTimeIntervalSetList=CreateTimeIntervalSetList()
        self.CreateBlockVersionList=CreateBlockVersionList()
        self.CreateCrossWalkList=CreateCrossWalkList()
        self.CreateUserDefinedGroupList=CreateUserDefinedGroupList()
        self.CreateTurnList=CreateTurnList()
        self.CreateActivityList=CreateActivityList()
        self.CreateStopAreaList=CreateStopAreaList()
        self.CreatePuTRelationList=CreatePuTRelationList()
        self.CreateStatisticsNetList=CreateStatisticsNetList()
        self.CreateLegTemplateList=CreateLegTemplateList()
        self.CreateHouseholdList=CreateHouseholdList()
        self.CreateAssignmentAnalysisList=CreateAssignmentAnalysisList()
        self.CreateRestrictedTrafficAreaList=CreateRestrictedTrafficAreaList()
        self.CreateTerritoryPuTDetailList=CreateTerritoryPuTDetailList()
        self.CreateStoryboardActionList=CreateStoryboardActionList()
        self.CreateCoupleSectionList=CreateCoupleSectionList()
        self.CreateTableEntryList=CreateTableEntryList()
        self.CreateDemandModelList=CreateDemandModelList()
        self.CreateModeList=CreateModeList()
        self.CreateLineRouteItemPuTDetailList=CreateLineRouteItemPuTDetailList()
        self.CreateTerritoryPuTDetailVehJourneyItemList=CreateTerritoryPuTDetailVehJourneyItemList()
        self.CreateLineList=CreateLineList()
        self.CreateLaneTemplateList=CreateLaneTemplateList()
        self.CreateBlockItemTypeList=CreateBlockItemTypeList()
        self.CreatePrTAssQualityList=CreatePrTAssQualityList()
        self.CreateStopTransferWalkTimeList=CreateStopTransferWalkTimeList()
        self.CreateStopPointPuTDetailList=CreateStopPointPuTDetailList()
        self.CreateActPairList=CreateActPairList()
        self.CreatePropagationLinkInfoList=CreatePropagationLinkInfoList()
        self.CreateValidDayList=CreateValidDayList()
        self.CreateBlockList=CreateBlockList()
        self.CreatePrTPathList=CreatePrTPathList()
        self.CreateScheduleList=CreateScheduleList()
        self.CreateMainODPairList=CreateMainODPairList()
        self.CreateSysRouteItemList=CreateSysRouteItemList()
        self.CreateAttributeList=CreateAttributeList()
        self.CreateSignalGroupList=CreateSignalGroupList()
        self.CreateNodeLegList=CreateNodeLegList()
        self.CreateTableDefinitionList=CreateTableDefinitionList()
        self.CreatePathItemList=CreatePathItemList()
        self.CreateTimeProfileTransferWalkTimeList=CreateTimeProfileTransferWalkTimeList()
        self.CreateLaneTurnRelList=CreateLaneTurnRelList()
        self.CreateMainTurnList=CreateMainTurnList()
        self.CreateOperatorList=CreateOperatorList()
        self.CreateCoupleSectionItemList=CreateCoupleSectionItemList()
        self.CreateFareZoneList=CreateFareZoneList()
        self.CreatePuTStatList=CreatePuTStatList()
        self.CreateBlockItemList=CreateBlockItemList()
        self.CreatePlannedConnectingJourneyList=CreatePlannedConnectingJourneyList()
        self.CreatePathSequenceItemList=CreatePathSequenceItemList()

class Filters:
    """! IFilters Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def LinkFilter(self):
        """! Link Filter """
        pass
    
    def ZoneFilter(self):
        """! Zone Filter """
        pass
    
    def StopGroupFilter(self):
        """! Stop Group Filter """
        pass
    
    def DetectorFilter(self):
        """! Detector Filter """
        pass
    
    def POIFilter(self, POICategory):
        """! POI Filter
        @param[in] POICategory """
        pass
    
    def TurnFilter(self):
        """! Turn Filter """
        pass
    
    def SharingStationFilter(self):
        """! Sharing Station Filter """
        pass
    
    def ToRange(self, to):
        """! Get a To-Range Object
        @param[in] to """
        pass
    
    def RestrictedTrafficAreaFilter(self):
        """! Restricted Traffic Area Filter """
        pass
    
    def AllPOIsFilter(self):
        """! All POIs Filter """
        pass
    
    def PathGroupFilter(self):
        """! Path Group Filter """
        pass
    
    def TerritoryFilter(self):
        """! Territory Filter """
        pass
    
    def MainNodeFilter(self):
        """! Main Node Filter """
        pass
    
    def GISFilter(self, GISCategory):
        """! GIS Filter
        @param[in] GISCategory """
        pass
    
    def VolumeAttributeValueFilter(self):
        """! Volume Attribute Value Filter """
        pass
    
    def MainZoneFilter(self):
        """! Main Zone Filter """
        pass
    
    def ConnectorFilter(self):
        """! Connector Filter """
        pass
    
    def MainTurnFilter(self):
        """! Main Turn Filter """
        pass
    
    def LocationFilter(self):
        """! Location Filter """
        pass
    
    def ScreenlineFilter(self):
        """! Screenline Filter """
        pass
    
    def FromRange(self, From):
        """! Get a From-Range Object
        @param[in] From """
        pass
    
    def InitAll(self):
        """! Init all Filters """
        pass
    
    def Open(self, FileName):
        """! Open
        @param[in] FileName """
        pass
    
    def Range(self, From, to):
        """! Get a From-To-Range Object
        @param[in] From
        @param[in] to """
        pass
    
    def ODPairFilter(self):
        """! OD Pair Filter """
        pass
    
    def LineGroupFilter(self):
        """! Line Group Filter """
        pass
    
    def SysRouteFilter(self):
        """! System Route Filter """
        pass
    
    def CountLocationFilter(self):
        """! Count Location Filter """
        pass
    
    def MainODPairFilter(self):
        """! Main OD Pair Filter """
        pass
    
    def NodeFilter(self):
        """! Node Filter """
        pass
    
    def Save(self, FileName):
        """! Save
        @param[in] FileName """
        pass
    
class LicenseManager:
    """! ILicenseManager Interface """

    def __init__(self):
        """Contains all attributes"""
        self.CurrentLicenseInfo=CurrentLicenseInfo()
    def VisibleServers(self):
        """! List all visible license servers """
        pass
    
    def NumProvidedLicenses(self, includeAllServers):
        """! Number of provided licenses on currently used / all visible servers
        @param[in] includeAllServers """
        pass
    
    def CmBoxID(self, servername):
        """! Return IDs of boxes on specified server
        @param[in] servername """
        pass
    
    def NumProvidedLicensesOnServer(self, servername):
        """! Number of provided licenses on specified server
        @param[in] servername """
        pass
    
class Net:
    """! INet Interface """

    def __init__(self):
        """Contains all attributes"""
        self.ActivityLocations=ActivityLocations()
        self.TableDefinitions=TableDefinitions()
        self.MainZones=MainZones()
        self.Detectors=Detectors()
        self.SignalControls=SignalControls()
        self.BlockVersions=BlockVersions()
        self.NotepadLines=NotepadLines()
        self.StructuralProps=StructuralProps()
        self.VehicleJourneySections=VehicleJourneySections()
        self.Attributes=Attributes()
        self.Storyboards=Storyboards()
        self.DemandTimeSeriesCont=DemandTimeSeriesCont()
        self.TimeIntervalSets=TimeIntervalSets()
        self.SystemRoutes=SystemRoutes()
        self.LineRoutes=LineRoutes()
        self.Lines=Lines()
        self.Tours=Tours()
        self.ActivityExecutions=ActivityExecutions()
        self.TSystems=TSystems()
        self.CalendarPeriod=CalendarPeriod()
        self.Locations=Locations()
        self.Persons=Persons()
        self.Crosswalks=Crosswalks()
        self.Matrices=Matrices()
        self.DeliveryConcepts=DeliveryConcepts()
        self.Zones=Zones()
        self.LinkTypes=LinkTypes()
        self.Territories=Territories()
        self.LegendParameters=LegendParameters()
        self.MainNodes=MainNodes()
        self.BlockItemTypes=BlockItemTypes()
        self.Blocks=Blocks()
        self.Activities=Activities()
        self.Schedules=Schedules()
        self.PlannedConnectingJourneys=PlannedConnectingJourneys()
        self.Screenlines=Screenlines()
        self.ODPairs=ODPairs()
        self.Trips=Trips()
        self.DemandStrata=DemandStrata()
        self.VehicleJourneyItems=VehicleJourneyItems()
        self.Nodes=Nodes()
        self.PathSets=PathSets()
        self.GeometryTemplates=GeometryTemplates()
        self.Directions=Directions()
        self.PrintParameters=PrintParameters()
        self.MainTurns=MainTurns()
        self.Turns=Turns()
        self.VehicleJourneys=VehicleJourneys()
        self.LineRouteItems=LineRouteItems()
        self.Sectors=Sectors()
        self.BlockItems=BlockItems()
        self.SignalGroups=SignalGroups()
        self.ValidDaysCont=ValidDaysCont()
        self.Stops=Stops()
        self.LegTemplates=LegTemplates()
        self.VehJourneySections=VehJourneySections()
        self.ActChains=ActChains()
        self.OperatingPeriods=OperatingPeriods()
        self.RestrictedTrafficAreas=RestrictedTrafficAreas()
        self.Modes=Modes()
        self.ActPairs=ActPairs()
        self.FareZones=FareZones()
        self.FlowBundle=FlowBundle()
        self.Connectors=Connectors()
        self.StopPoints=StopPoints()
        self.LineRouteItemPuTDetails=LineRouteItemPuTDetails()
        self.TicketTypes=TicketTypes()
        self.VehicleUnits=VehicleUnits()
        self.StoryboardActions=StoryboardActions()
        self.TollMatrices=TollMatrices()
        self.TimeProfiles=TimeProfiles()
        self.PropagationLinkInfos=PropagationLinkInfos()
        self.Links=Links()
        self.StopAreas=StopAreas()
        self.DemandSegments=DemandSegments()
        self.GraphicParameters=GraphicParameters()
        self.TimeProfileItems=TimeProfileItems()
        self.CountLocations=CountLocations()
        self.Households=Households()
        self.VehicleCombinations=VehicleCombinations()
        self.Stages=Stages()
        self.POICategories=POICategories()
        self.SystemRouteItems=SystemRouteItems()
        self.GISCategories=GISCategories()
        self.ChainedUpVehicleJourneySections=ChainedUpVehicleJourneySections()
        self.MainLines=MainLines()
        self.TerritoryPuTDetails=TerritoryPuTDetails()
        self.TimeSeriesCont=TimeSeriesCont()
        self.StopPointPuTDetails=StopPointPuTDetails()
        self.Marking=Marking()
        self.TerritoryPuTDetailVehJourneyItems=TerritoryPuTDetailVehJourneyItems()
        self.UserDefinedGroups=UserDefinedGroups()
        self.SharingStations=SharingStations()
        self.TripRequests=TripRequests()
        self.DemandModels=DemandModels()
        self.CameraPositions=CameraPositions()
        self.MainODPairs=MainODPairs()
        self.PersonGroups=PersonGroups()
        self.Operators=Operators()
        self.Paths=Paths()
        self.GetAllAliases=GetAllAliases()
        self.Active=Active()
    def AddTimeProfile(self, Name, LineRoute):
        """! Add a time profile
        @param[in] Name
        @param[in] LineRoute """
        pass
    
    def AddOperator(self, no):
        """! Add an operator
        @param[in] no """
        pass
    
    def RemoveConnector(self, Connector):
        """! Remove connector from network
        @param[in] Connector """
        pass
    
    def AllLinksUniqueOnLineRoutes(self, activateHits):
        """! Check uniqueness of links on line route courses
        @param[in] activateHits """
        pass
    
    def AddSchedule(self, no, Person):
        """! Create a schedule
        @param[in] no
        @param[in] Person """
        pass
    
    def AddMultiTours(self, KeyArray):
        """! Create multiple tours
    KeyArray: Array of [No (int), Person (VARIANT), Schedule (VARIANT)]
        @param[in] KeyArray """
        pass
    
    def RemoveTimeProfile(self, TimeProfile):
        """! Remove time profile from network
        @param[in] TimeProfile """
        pass
    
    def AddVehicleJourney(self, no, TimeProfile):
        """! Add a vehicle journey
        @param[in] no
        @param[in] TimeProfile """
        pass
    
    def AddBlockVersion(self, no):
        """! Add a block version
        @param[in] no """
        pass
    
    def AddMultiLongTermChoices(self, KeyArray):
        """! Add multiple long term choices
    KeyArray: Array of [Person (VARIANT), ActivityLocation (VARIANT)]
        @param[in] KeyArray """
        pass
    
    def PasteVehicleJourneys(self):
        """! Paste vehicle journeys from clipboard """
        pass
    
    def RemoveDemandTimeSeries(self, DemandTimeSeries):
        """! Remove a DemandTimeSeries
        @param[in] DemandTimeSeries """
        pass
    
    def RemoveGeometryTemplate(self, GeometryTemplate):
        """! Remove a geometry template
        @param[in] GeometryTemplate """
        pass
    
    def AddPath(self, no, PathSet, fromZone, toZone, PathItems):
        """! Add a path
        @param[in] no
        @param[in] PathSet
        @param[in] fromZone
        @param[in] toZone
        @param[in] PathItems """
        pass
    
    def TransformCoordinates(self, SourceCoordinates, SourceProjection, DestinationProjection):
        """! Change the coordinates from the source to the destination coordinate system
        @param[in] SourceCoordinates
        @param[in] SourceProjection
        @param[in] DestinationProjection """
        pass
    
    def RemoveDemandModel(self, DemandModel):
        """! Remove a DemandModel
        @param[in] DemandModel """
        pass
    
    def AddTicketType(self, no):
        """! Create a ticket type
        @param[in] no """
        pass
    
    def CreateMapMatcher(self):
        """! Create a map matcher object """
        pass
    
    def AddTimeSeries(self, no, domainType):
        """! Create a TimeSeries
        @param[in] no
        @param[in] domainType """
        pass
    
    def RemoveDeliveryConcept(self, DeliveryConcept):
        """! Remove a Delivery Concept
        @param[in] DeliveryConcept """
        pass
    
    def AddActPair(self, Code, DemandModel, OrigActivity, DestActivity):
        """! Create an ActPair
        @param[in] Code
        @param[in] DemandModel
        @param[in] OrigActivity
        @param[in] DestActivity """
        pass
    
    def AddMainNode(self, no, XCoord, YCoord):
        """! Add a main node
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def AddTimeIntervalSet(self, no):
        """! Create a time interval set
        @param[in] no """
        pass
    
    def AddLongTermChoice(self, Person, ActivityLocation):
        """! Assign an activity location to a person as long term choice
        @param[in] Person
        @param[in] ActivityLocation """
        pass
    
    def RemoveValidDays(self, ValidDays):
        """! Remove valid days from network
        @param[in] ValidDays """
        pass
    
    def AddTour(self, no, Person, Schedule):
        """! Create a tour
        @param[in] no
        @param[in] Person
        @param[in] Schedule """
        pass
    
    def CreateExportSvgPara(self):
        """! Create ExportSvgPara """
        pass
    
    def RemoveSignalControl(self, SignalControl):
        """! Remove a signal control
        @param[in] SignalControl """
        pass
    
    def AddActChain(self, Code, DemandModel, ActChainSequence):
        """! Create an ActChain
        @param[in] Code
        @param[in] DemandModel
        @param[in] ActChainSequence """
        pass
    
    def AddMultiTableEntries(self, TableDefinition, KeyArray):
        """! Add multiple table entries
        @param[in] TableDefinition
        @param[in] KeyArray """
        pass
    
    def RemoveStopPoint(self, StopPoint):
        """! Remove stop point from network
        @param[in] StopPoint """
        pass
    
    def RemoveZone(self, Zone):
        """! Remove zone from network
        @param[in] Zone """
        pass
    
    def AddPerson(self, no, Household):
        """! Create a person
        @param[in] no
        @param[in] Household """
        pass
    
    def AddTableDefinition(self, Name):
        """! Add a table definition
        @param[in] Name """
        pass
    
    def AddRestrictedTrafficArea(self, no, XCoord, YCoord):
        """! Add a toll system
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def CreateFuzzySurfaceAlignmentPara(self):
        """! Create parameter object for fuzzy surface alignment """
        pass
    
    def RemoveActivityLocation(self, ActivityLocation):
        """! Remove an activity location
        @param[in] ActivityLocation """
        pass
    
    def AddBlock(self, no, BlockVersion):
        """! Add a block
        @param[in] no
        @param[in] BlockVersion """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
    def RemoveHousehold(self, Household):
        """! Remove a household
        @param[in] Household """
        pass
    
    def AddMultiActivityExecutions(self, KeyArray):
        """! Create multiple activity executions
    KeyArray: Array of [InsertBeforeIndex (int), Person (VARIANT), Schedule (VARIANT)]
        @param[in] KeyArray """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AddMainZone(self, no, XCoord, YCoord):
        """! Add a main zone
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def RemovePOICategory(self, POICategory):
        """! Remove POI category from network
        @param[in] POICategory """
        pass
    
    def LaneTurns(self, OnlyNonDefaults):
        """! LaneTurns
        @param[in] OnlyNonDefaults """
        pass
    
    def RemoveVehicleUnit(self, VehicleUnit):
        """! Remove vehicle unit from network
        @param[in] VehicleUnit """
        pass
    
    def DoFuzzySurfaceAlignment(self, FuzzySurfaceAlignmentPara):
        """! Do fuzzy surface aligment
        @param[in] FuzzySurfaceAlignmentPara """
        pass
    
    def RemoveStoryboard(self, storyBoard):
        """! Remove a storyboard
        @param[in] storyBoard """
        pass
    
    def RemoveCountLocation(self, CountLocation):
        """! Remove count location from network
        @param[in] CountLocation """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def RemoveVehicleJourney(self, VehicleJourney):
        """! Remove vehicle journey from network
        @param[in] VehicleJourney """
        pass
    
    def AddLink(self, no, fromNode, toNode, LinkType):
        """! Add a link
        @param[in] no
        @param[in] fromNode
        @param[in] toNode
        @param[in] LinkType """
        pass
    
    def RemoveOperatingPeriod(self, OperatingPeriod):
        """! Remove an Operating Period
        @param[in] OperatingPeriod """
        pass
    
    def AddMultiSchedules(self, KeyArray):
        """! Create multiple schedules
    KeyArray: Array of [No (int), Person (VARIANT)]
        @param[in] KeyArray """
        pass
    
    def AddUserDefinedGroup(self, Name, Description):
        """! Add a user defined group
        @param[in] Name
        @param[in] Description """
        pass
    
    def AddTSystemLikeAnother(self, CodeOfNewTSystem, TSysClass, CodeOfExistingTSystem):
        """! Add a transport system and copy transport system dependent net object attributes
        @param[in] CodeOfNewTSystem
        @param[in] TSysClass
        @param[in] CodeOfExistingTSystem """
        pass
    
    def CreateIntersectAttributePara(self):
        """! Create parameter object for Intersect """
        pass
    
    def RemoveLinkType(self, LinkType):
        """! Remove link type from network
        @param[in] LinkType """
        pass
    
    def RemoveStructuralProp(self, StructuralProp):
        """! Remove a structural property
        @param[in] StructuralProp """
        pass
    
    def RemoveDemandStratum(self, DemandStratum):
        """! Remove a DemandStratum
        @param[in] DemandStratum """
        pass
    
    def RemoveDemandSegment(self, DemandSegment):
        """! Remove demand segment from network
        @param[in] DemandSegment """
        pass
    
    def AddScreenline(self, no):
        """! Add a screenline
        @param[in] no """
        pass
    
    def AddOperatingPeriod(self, no):
        """! Create an Operating Period
        @param[in] no """
        pass
    
    def EditAttribute(self, attributeFormulaPara):
        """! Do Edit attribute
        @param[in] attributeFormulaPara """
        pass
    
    def AddPlannedConnectingJourney(self, FromVehJourney, FromIndex, ToVehJourney, ToIndex):
        """! Create a planned connecting journey
        @param[in] FromVehJourney
        @param[in] FromIndex
        @param[in] ToVehJourney
        @param[in] ToIndex """
        pass
    
    def RemoveUserDefinedGroup(self, UserDefinedGroup):
        """! Remove user defined group from network
        @param[in] UserDefinedGroup """
        pass
    
    def AddStop(self, no, XCoord, YCoord):
        """! Add a stop
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def Geometries(self, OnlyNonDefaults):
        """! Geometries
        @param[in] OnlyNonDefaults """
        pass
    
    def AddMultiPersons(self, KeyArray):
        """! Create multiple persons
    KeyArray: Array of [No (int), Household (IHousehold*)]
        @param[in] KeyArray """
        pass
    
    def RemoveFareZone(self, FareZone):
        """! Remove a Fare Zone
        @param[in] FareZone """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def RemovePersonGroup(self, PersonGroup):
        """! Remove a PersonGroup
        @param[in] PersonGroup """
        pass
    
    def RemoveLink(self, Link):
        """! Remove link from network
        @param[in] Link """
        pass
    
    def RemoveMainNode(self, MainNode):
        """! Remove main node from network
        @param[in] MainNode """
        pass
    
    def RemovePathSet(self, PathSet):
        """! Remove pathset from network
        @param[in] PathSet """
        pass
    
    def Legs(self, OnlyNonDefaults):
        """! Legs
        @param[in] OnlyNonDefaults """
        pass
    
    def RemoveActPair(self, ActPAir):
        """! Remove an ActPair
        @param[in] ActPAir """
        pass
    
    def AddMatrixWithFormula(self, no, formula, objectTypeRef, MatrixType):
        """! Add a matrix with formula
        @param[in] no
        @param[in] formula
        @param[in] objectTypeRef
        @param[in] MatrixType """
        pass
    
    def AllCouplingsConsistent(self):
        """! Check consistency of all couplings """
        pass
    
    def AddActivityExecution(self, InsertBeforeIndex, Person, Schedule):
        """! Create an activity execution
        @param[in] InsertBeforeIndex
        @param[in] Person
        @param[in] Schedule """
        pass
    
    def AddMultiZones(self, KeyArray):
        """! Create multiple zones
    KeyArray: Array of [No (int), XCoord (double), YCoord (double)]
        @param[in] KeyArray """
        pass
    
    def RemoveMode(self, Mode):
        """! Remove mode from network
        @param[in] Mode """
        pass
    
    def AddVehicleJourneySection(self, VehicleJourney, FromItem, ToItem):
        """! Add a vehicle journey section
        @param[in] VehicleJourney
        @param[in] FromItem
        @param[in] ToItem """
        pass
    
    def AddSharingStation(self, no, Node):
        """! Create a Sharing Station
        @param[in] no
        @param[in] Node """
        pass
    
    def CreateODConnectors(self, PrTorPuT, MaxLength, MaxNumConnectorsPerZoneCreatedInThisStep, MaxNumConnectorsPerZoneTotal, TypeOfNewConnectors):
        """! Create OD Connectors
        @param[in] PrTorPuT
        @param[in] MaxLength
        @param[in] MaxNumConnectorsPerZoneCreatedInThisStep
        @param[in] MaxNumConnectorsPerZoneTotal
        @param[in] TypeOfNewConnectors """
        pass
    
    def RemoveBlockVersion(self, BlockVersion):
        """! Remove block version from network
        @param[in] BlockVersion """
        pass
    
    def RecalculateLinkOrientations(self, Nodes, onlyActiveNodes, MainNodes, onlyActiveMainNodes, onlyAutomaticOrientations, mergeLinks):
        """! Recalculate link orientations
        @param[in] Nodes
        @param[in] onlyActiveNodes
        @param[in] MainNodes
        @param[in] onlyActiveMainNodes
        @param[in] onlyAutomaticOrientations
        @param[in] mergeLinks """
        pass
    
    def RemoveMatrix(self, Matrix):
        """! Remove a Matrix
        @param[in] Matrix """
        pass
    
    def RotateMoveNetwork(self, rotation, transX, transY, scaleFactor):
        """! Rotate and move the network
        @param[in] rotation
        @param[in] transX
        @param[in] transY
        @param[in] scaleFactor """
        pass
    
    def DeletePuTPathUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute from PuT paths
        @param[in] ID """
        pass
    
    def RemoveMainLine(self, MainLine):
        """! Remove main line from network
        @param[in] MainLine """
        pass
    
    def AddDetector(self, no, CountLocation, XCoord, YCoord):
        """! Add a detector
        @param[in] no
        @param[in] CountLocation
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def DoNodeLinkNetworkSimplification(self, NodeLinkNetworkSimplificationPara):
        """! Do node link network simplification
        @param[in] NodeLinkNetworkSimplificationPara """
        pass
    
    def RemoveTableDefinition(self, TableDefinition):
        """! Remove table definition from network
        @param[in] TableDefinition """
        pass
    
    def CreateSurfaceSet(self):
        """! Create a surface set """
        pass
    
    def RemoveTripRequest(self, TripRequest):
        """! Remove a trip request
        @param[in] TripRequest """
        pass
    
    def AddPOICategory(self):
        """! Add a POI category """
        pass
    
    def RemoveLine(self, Line):
        """! Remove line from network
        @param[in] Line """
        pass
    
    def RemoveTimeIntervalSet(self, TimeIntervalSet):
        """! Remove a time interval set
        @param[in] TimeIntervalSet """
        pass
    
    def RemovePerson(self, Person):
        """! Remove a person
        @param[in] Person """
        pass
    
    def AddMultiActivityLocations(self, KeyArray):
        """! Create multiple activity locations
    KeyArray: Array of [Activity (VARIANT), Location (VARIANT)]
        @param[in] KeyArray """
        pass
    
    def AddStopPointOnNode(self, no, StopArea, Node):
        """! Add a stop point on a node
        @param[in] no
        @param[in] StopArea
        @param[in] Node """
        pass
    
    def AddNode(self, no, XCoord, YCoord):
        """! Add a node
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def RemoveTSystem(self, TSystem):
        """! Remove transport system from network
        @param[in] TSystem """
        pass
    
    def RemoveTableEntry(self, TableEntry):
        """! Remove table entry from network
        @param[in] TableEntry """
        pass
    
    def AddActivityLocation(self, Activity, Location):
        """! Create an activity location
        @param[in] Activity
        @param[in] Location """
        pass
    
    def AddLocation(self, no, XCoord, YCoord):
        """! Create a location 
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def AddLine(self, Name, TSystem):
        """! Add a line
        @param[in] Name
        @param[in] TSystem """
        pass
    
    def RemoveTerritory(self, Territory):
        """! Remove territory from network
        @param[in] Territory """
        pass
    
    def AddTSystem(self, Code, TSysClass):
        """! Add a transport system
        @param[in] Code
        @param[in] TSysClass """
        pass
    
    def CreateNodeLinkNetworkSimplificationPara(self):
        """! Create parameter object for node link network simplification """
        pass
    
    def AddActivity(self, Code, DemandModel):
        """! Create an Activity
        @param[in] Code
        @param[in] DemandModel """
        pass
    
    def RemoveActChain(self, ActChain):
        """! Remove an ActChain
        @param[in] ActChain """
        pass
    
    def RemoveScreenline(self, Screenlines):
        """! Remove screenline from network
        @param[in] Screenlines """
        pass
    
    def RemoveSignalGroup(self, SignalGroup):
        """! Remove a signal group
        @param[in] SignalGroup """
        pass
    
    def RemoveStop(self, Stop):
        """! Remove stop from network
        @param[in] Stop """
        pass
    
    def AddVehicleUnit(self, no, TSysOrSet):
        """! Add a vehicle unit
        @param[in] no
        @param[in] TSysOrSet """
        pass
    
    def RemoveLocation(self, Location):
        """! Remove a location 
        @param[in] Location """
        pass
    
    def SetTerritoryActive(self, Territory):
        """! Set all objects in territory active
        @param[in] Territory """
        pass
    
    def AddVehicleCombination(self, no):
        """! Add a vehicle combination
        @param[in] no """
        pass
    
    def AddSector(self, Code, DemandModel):
        """! Create a Sector
        @param[in] Code
        @param[in] DemandModel """
        pass
    
    def AddDeliveryConcept(self, Code, DemandModel):
        """! Create a Delivery Concept
        @param[in] Code
        @param[in] DemandModel """
        pass
    
    def AddTerritory(self, no, XCoord, YCoord):
        """! Add a territory
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def CreateEditAttributePara(self):
        """! Create parameter object for Edit attribute """
        pass
    
    def RemoveNodeConnectLinks(self, Node, dataLink, newLinkNo):
        """! Remove two-leg node from network and connect the links
        @param[in] Node
        @param[in] dataLink
        @param[in] newLinkNo """
        pass
    
    def AddPuTPathUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula):
        """! Add user-defined attribute to PuT paths
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula """
        pass
    
    def AddCrosswalk(self, Leg, Index, Direction):
        """! Add a crosswalk
        @param[in] Leg
        @param[in] Index
        @param[in] Direction """
        pass
    
    def AddSystemRoute(self, Name, TSystem, routeItems, NetReadRouteSearchTSys):
        """! Add a system route
        @param[in] Name
        @param[in] TSystem
        @param[in] routeItems
        @param[in] NetReadRouteSearchTSys """
        pass
    
    def AddDemandModel(self, Code, DemandModelType):
        """! Create a DemandModel
        @param[in] Code
        @param[in] DemandModelType """
        pass
    
    def AddLinkType(self, no):
        """! Add a link type
        @param[in] no """
        pass
    
    def RemoveSharingStation(self, SharingStation):
        """! Remove a Sharing Station
        @param[in] SharingStation """
        pass
    
    def AddCameraPosition(self, no):
        """! Add a camera position
        @param[in] no """
        pass
    
    def AddTripRequest(self, no, DSeg):
        """! Create a trip request
        @param[in] no
        @param[in] DSeg """
        pass
    
    def AddMultiHouseholds(self, KeyArray):
        """! Create multiple households
    KeyArray: Array of [No (int), Residence (IActivityLocation*)]
        @param[in] KeyArray """
        pass
    
    def CopyMarkedVehicleJourneys(self):
        """! Copy marked vehicle journeys to clipboard """
        pass
    
    def AddValidDays(self, no):
        """! Add valid days
        @param[in] no """
        pass
    
    def AddStopArea(self, no, Stop, Node, XCoord, YCoord):
        """! Add a stop area
        @param[in] no
        @param[in] Stop
        @param[in] Node
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def RemoveBlockItemType(self, BlockItemType):
        """! Remove block item type from network
        @param[in] BlockItemType """
        pass
    
    def AddMode(self, Code, TSysOrSet):
        """! Add a mode
        @param[in] Code
        @param[in] TSysOrSet """
        pass
    
    def RemovePOI(self, POI):
        """! Remove POI from network
        @param[in] POI """
        pass
    
    def RemovePath(self, Path):
        """! Remove path from network
        @param[in] Path """
        pass
    
    def RemoveVehicleJourneySection(self, VehicleJourneySection):
        """! Remove vehicle journey section from network
        @param[in] VehicleJourneySection """
        pass
    
    def IntersectAttributes(self, intersectAttributeActionPara):
        """! Do Intersect
        @param[in] intersectAttributeActionPara """
        pass
    
    def RemoveRestrictedTrafficArea(self, RestrictedTrafficArea):
        """! Remove a toll system
        @param[in] RestrictedTrafficArea """
        pass
    
    def CreatePrTShortestPathSearcher(self):
        """! Create PrT Shortest Path Searcher """
        pass
    
    def RemoveSector(self, Sector):
        """! Remove a Sector
        @param[in] Sector """
        pass
    
    def AddTrip(self, InsertBeforeIndex, Person, Schedule, Tour):
        """! Create a trip at given position or at end of tour
        @param[in] InsertBeforeIndex
        @param[in] Person
        @param[in] Schedule
        @param[in] Tour """
        pass
    
    def AddStructuralProp(self, Code, DemandModel):
        """! Create a structural property
        @param[in] Code
        @param[in] DemandModel """
        pass
    
    def AddLane(self, OriginLane, Inside):
        """! Add a lane
        @param[in] OriginLane
        @param[in] Inside """
        pass
    
    def RemoveSystemRoute(self, SystemRoute):
        """! Remove system route from network
        @param[in] SystemRoute """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! AskAttribute
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def AddLineRoute(self, Name, Line, Direction, routeItems, NetReadRouteSearchTSys):
        """! Add a line route with name in network
        @param[in] Name
        @param[in] Line
        @param[in] Direction
        @param[in] routeItems
        @param[in] NetReadRouteSearchTSys """
        pass
    
    def RemoveMainZone(self, MainZone):
        """! Remove main zone from network
        @param[in] MainZone """
        pass
    
    def AddPersonGroup(self, Code, DemandModel):
        """! Create a PersonGroup
        @param[in] Code
        @param[in] DemandModel """
        pass
    
    def RemoveNode(self, Node):
        """! Remove node from network
        @param[in] Node """
        pass
    
    def RemoveActivity(self, Activity):
        """! Remove an Activity
        @param[in] Activity """
        pass
    
    def AddTableEntry(self, TableDefinition, no):
        """! Add a table entry
        @param[in] TableDefinition
        @param[in] no """
        pass
    
    def RemoveVehicleCombination(self, VehicleCombination):
        """! Remove vehicle combination from network
        @param[in] VehicleCombination """
        pass
    
    def RemoveLegTemplate(self, legTemplate):
        """! Remove a leg template
        @param[in] legTemplate """
        pass
    
    def RemoveOperator(self, Operator):
        """! Remove operator from network
        @param[in] Operator """
        pass
    
    def RemoveTimeSeries(self, TimeSeries):
        """! Remove a TimeSeries
        @param[in] TimeSeries """
        pass
    
    def AddDemandStratumVISEM(self, Code, DemandModel, PersonGroup, ActChain):
        """! Create a DemandStratum
        @param[in] Code
        @param[in] DemandModel
        @param[in] PersonGroup
        @param[in] ActChain """
        pass
    
    def AddPathSet(self, no):
        """! Add a pathset
        @param[in] no """
        pass
    
    def AddMultiLocations(self, KeyArray):
        """! Create multiple locations
    KeyArray: Array of [No (int), XCoord (double), YCoord (double)]
        @param[in] KeyArray """
        pass
    
    def RemoveLineRoute(self, LineRoute):
        """! Remove line route from network
        @param[in] LineRoute """
        pass
    
    def AddMainLine(self, Name):
        """! Add a main line
        @param[in] Name """
        pass
    
    def RemoveLane(self, Lane):
        """! Remove a lane
        @param[in] Lane """
        pass
    
    def RemoveBlock(self, Block):
        """! Remove block from network
        @param[in] Block """
        pass
    
    def RemovePlannedConnectingJourney(self, PlannedConnectingJourney):
        """! Remove a planned connecting journey
        @param[in] PlannedConnectingJourney """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AddPOI(self, no, POICategory, XCoord, YCoord):
        """! Add a POI
        @param[in] no
        @param[in] POICategory
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def AddAlias(self, ObjectID, AttributeID, Alias):
        """! Create an alias
        @param[in] ObjectID
        @param[in] AttributeID
        @param[in] Alias """
        pass
    
    def AddDemandStratumTourBasedFreight(self, Code, DemandModel, Sector, DeliveryConcept):
        """! Create a DemandStratum
        @param[in] Code
        @param[in] DemandModel
        @param[in] Sector
        @param[in] DeliveryConcept """
        pass
    
    def AddMultiTrips(self, KeyArray):
        """! Create multiple trips
    KeyArray: Array of [InsertBeforeIndex (int), Person (VARIANT), Schedule (VARIANT), Tour (VARIANT)]
        @param[in] KeyArray """
        pass
    
    def AddLaneTurn(self, FromLane, ToLane):
        """! Add a lane turn
        @param[in] FromLane
        @param[in] ToLane """
        pass
    
    def RemoveStopArea(self, StopArea):
        """! Remove stop area from network
        @param[in] StopArea """
        pass
    
    def Lanes(self, OnlyNonDefaults):
        """! Lanes
        @param[in] OnlyNonDefaults """
        pass
    
    def RemoveStage(self, Stage):
        """! Remove a stage
        @param[in] Stage """
        pass
    
    def AddDemandStratum(self, Code, DemandModel, PersonGroupCodes, ActPAir):
        """! Create a DemandStratum
        @param[in] Code
        @param[in] DemandModel
        @param[in] PersonGroupCodes
        @param[in] ActPAir """
        pass
    
    def SetProjection(self, newProjection, calculate):
        """! Change the coordinate system
        @param[in] newProjection
        @param[in] calculate """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def RemoveCameraPosition(self, cameraPosition):
        """! Remove a camera position
        @param[in] cameraPosition """
        pass
    
    def RemoveCrosswalk(self, Crosswalk):
        """! Remove a crosswalk
        @param[in] Crosswalk """
        pass
    
    def AddMatrix(self, no, objectTypeRef, MatrixType):
        """! Add a matrix
        @param[in] no
        @param[in] objectTypeRef
        @param[in] MatrixType """
        pass
    
    def AddStopPointOnLink(self, no, StopArea, fromNode, toNode, Directed):
        """! Add a stop point on a link
        @param[in] no
        @param[in] StopArea
        @param[in] fromNode
        @param[in] toNode
        @param[in] Directed """
        pass
    
    def AddStage(self, no, SignalControl, Duration):
        """! Add a stage
        @param[in] no
        @param[in] SignalControl
        @param[in] Duration """
        pass
    
    def RemoveLaneTurn(self, Laneturn):
        """! Remove a lane turn
        @param[in] Laneturn """
        pass
    
    def RemoveDetector(self, Detector):
        """! Remove detector from network
        @param[in] Detector """
        pass
    
    def AddDemandTimeSeries(self, no, DefaultTimeSeriesNo):
        """! Create a DemandTimeSeries
        @param[in] no
        @param[in] DefaultTimeSeriesNo """
        pass
    
    def AddBlockItemType(self, no):
        """! Add a block item type
        @param[in] no """
        pass
    
    def AddStoryboard(self, no):
        """! Add a storyboard
        @param[in] no """
        pass
    
    def CreateRemoveNodesParameters(self):
        """! Create remove nodes parameters """
        pass
    
    def AddSignalControl(self, no, SignalizationType, IsStageBased, NumStages):
        """! Add a signal control
        @param[in] no
        @param[in] SignalizationType
        @param[in] IsStageBased
        @param[in] NumStages """
        pass
    
    def AddCountLocation(self, no, fromNode, toNode):
        """! Add a count location
        @param[in] no
        @param[in] fromNode
        @param[in] toNode """
        pass
    
    def AddFareZone(self, no):
        """! Create a Fare Zone
        @param[in] no """
        pass
    
    def AddUserDefinedAttributeForNetObject(self, netObjectID, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute for a network object type
        @param[in] netObjectID
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def RemoveAlias(self, ObjectID, AttributeID):
        """! Remove an alias
        @param[in] ObjectID
        @param[in] AttributeID """
        pass
    
    def RemoveTicketType(self, TicketType):
        """! Remove a ticket type
        @param[in] TicketType """
        pass
    
    def AllVehJourneyItemsHaveVehJourneySections(self, RepairHits, activateHits):
        """! Does every vehicle journey item have at least one vehicle journey section?
        @param[in] RepairHits
        @param[in] activateHits """
        pass
    
    def AddSignalGroup(self, no, SignalControl):
        """! Add a signal group
        @param[in] no
        @param[in] SignalControl """
        pass
    
    def AddHousehold(self, no, Residence):
        """! Create a household
        @param[in] no
        @param[in] Residence """
        pass
    
    def AddZone(self, no, XCoord, YCoord):
        """! Add a zone
        @param[in] no
        @param[in] XCoord
        @param[in] YCoord """
        pass
    
    def AddDemandSegment(self, Code, Mode):
        """! Add a demand segment
        @param[in] Code
        @param[in] Mode """
        pass
    
    def AddConnector(self, Zone, Node):
        """! Add a connector
        @param[in] Zone
        @param[in] Node """
        pass
    
class Workbench:
    """! IWorkbench Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Lists=Lists()
        self.CreateGraphicalTimetable=CreateGraphicalTimetable()
        self.LineSelectionAndStopSequenceTool=LineSelectionAndStopSequenceTool()
        self.CreateBlockDisplay=CreateBlockDisplay()
        self.CreateNetEditor3D=CreateNetEditor3D()
        self.BlockSelectionTool=BlockSelectionTool()
        self.CreateTabularTimetable=CreateTabularTimetable()
    def CreateSchematicLineDiagram(self):
        """! Create schematic line diagram """
        pass
    
    def CreateMatrixHistogram(self, Matrix):
        """! Create matrix histogram
        @param[in] Matrix """
        pass
    
    def LoadGlobalLayout(self, FileName):
        """! Open global layout file
        @param[in] FileName """
        pass
    
    def ActivateNetworkEditor(self):
        """! Activate network editor (put it into foreground and set focus or open it if it does not exist """
        pass
    
    def CreateMatrixTableListMode(self, Matrix):
        """! Create matrix table in list mode
        @param[in] Matrix """
        pass
    
    def IsBlockDisplayRunning(self):
        """! Is there a block display opened? """
        pass
    
    def IsJunctionEditorRunning(self):
        """! Is there a junctioneditor opened? """
        pass
    
    def CreateActivityProfileAnalysis(self):
        """! Create activity profile analysis """
        pass
    
    def SaveGlobalLayout(self, FileName):
        """! Save global layout file
        @param[in] FileName """
        pass
    
    def CreateDRTVehicleAnalysis(self):
        """! Create DRT vehicle analysis """
        pass
    
    def GetSafetyToolWindowVisible(self):
        """! Is the Safety toolwindow visible? """
        pass
    
    def CreateMatrixTable(self, Matrix):
        """! Create matrix table
        @param[in] Matrix """
        pass
    
    def CreateLineBlockProfileAnalysis(self):
        """! Create line block profile analysis """
        pass
    
    def CreateTimetableProfileAnalysis(self):
        """! Create timetable profile analysis """
        pass
    
    def GetSafetyToolWindowHandle(self):
        """! Get the safety toolwindows's handle """
        pass
    
    def SetSafetyToolWindowVisible(self, visible):
        """! Show or hide the Safety toolwindow
        @param[in] visible """
        pass
    
    def IsTabularTimetableRunning(self):
        """! Is there a tabular timetable opened? """
        pass
    
    def IsGraphicalTimetableRunning(self):
        """! Is there a graphical timetable opened? """
        pass
    
    def CreateJunctionEditor(self):
        """! Junction Editor """
        pass
    
class IO:
    """! IIO Interface """

    def __init__(self):
        """Contains all attributes"""
        self.CurrentVersionFile=CurrentVersionFile()
    def ExportSubnetworkToANM(self, SubnetworkGenerationParaFileName, ANMExportParaFileName, AssignmentMethod, StartVissim, ProceduresParaFile):
        """! ANM-Export of a Subnetwork
        @param[in] SubnetworkGenerationParaFileName
        @param[in] ANMExportParaFileName
        @param[in] AssignmentMethod
        @param[in] StartVissim
        @param[in] ProceduresParaFile """
        pass
    
    def ImportVistroFile(self, FileName):
        """! Import Vistro file
        @param[in] FileName """
        pass
    
    def LoadAttributeFile(self, FileName):
        """! Load Attribute file
        @param[in] FileName """
        pass
    
    def LoadCloudModelFromServer(self, CloudModelName):
        """! Open cloud model from server. Discards any local changes that have not been uploaded yet.
        @param[in] CloudModelName """
        pass
    
    def ExportShapefile(self, FileName, ExportShapefileParameter):
        """! ExportShapefile
        @param[in] FileName
        @param[in] ExportShapefileParameter """
        pass
    
    def ImportGPX(self, ImportDirectory, Files, ImportParameter):
        """! Import GPX data
        @param[in] ImportDirectory
        @param[in] Files
        @param[in] ImportParameter """
        pass
    
    def CreateNetReadRouteSearchTSys(self):
        """! Create NetReadRouteSearchTSys """
        pass
    
    def CreateTableAttrSelection(self):
        """! Create TableAttrSelection """
        pass
    
    def SaveToMsSqlServerDatabaseUsingTableAttrSelection(self, Layout, ConnectionString, PassWord, setPrimaryKeys, activeNetElemsOnly):
        """! SaveToMsSqlServerDatabase using Layout
        @param[in] Layout
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] setPrimaryKeys
        @param[in] activeNetElemsOnly """
        pass
    
    def LoadCloudModelFromDisk(self, CloudModelName):
        """! Open cloud model from disk. Works offline and opens the last saved or opened state of the model.
        @param[in] CloudModelName """
        pass
    
    def SaveNetUsingTableAttrSelection(self, FileName, Layout, activeNetElemsOnly):
        """! Save Network using Layout
        @param[in] FileName
        @param[in] Layout
        @param[in] activeNetElemsOnly """
        pass
    
    def SaveAttributeFile(self, FileName, ListLayoutFile, Separator, keyind, writeAdditionalHeader):
        """! Save Attribute file
        @param[in] FileName
        @param[in] ListLayoutFile
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def CreateImportIntersectionDataPara(self):
        """! Create intersection data import parameter """
        pass
    
    def ImportExtRouteFile(self, FileName, ReplaceTimeIntervals):
        """! Extended route import
        @param[in] FileName
        @param[in] ReplaceTimeIntervals """
        pass
    
    def SaveSQLiteDatabaseUsingTableAttrSelection(self, FileName, Layout, activeNetElemsOnly):
        """! Save SQLite DB using Layout
        @param[in] FileName
        @param[in] Layout
        @param[in] activeNetElemsOnly """
        pass
    
    def LoadSQLiteDatabase(self, DatabasePath, ReadAdditive, routeSearch, AddNetRead):
        """! Load SQLite DB
        @param[in] DatabasePath
        @param[in] ReadAdditive
        @param[in] routeSearch
        @param[in] AddNetRead """
        pass
    
    def CreateImportShapeFilePara(self):
        """! Create ImportShapeFilePara """
        pass
    
    def ExportANMNet(self, FileName, ANMParaFilename):
        """! Export ANM network
        @param[in] FileName
        @param[in] ANMParaFilename """
        pass
    
    def LoadCloudModel(self, CloudModelName):
        """! Open cloud model. Fails if there are conflicting changes (local and online).
        @param[in] CloudModelName """
        pass
    
    def ImportIntersectionData(self, ImportParameter):
        """! ImportIntersectionData
        @param[in] ImportParameter """
        pass
    
    def SaveCloudModel(self, Upload):
        """! Save current cloud model
        @param[in] Upload """
        pass
    
    def LoadDemandFile(self, FileName, ReadAdditive, AddNetRead):
        """! Load Demand file
        @param[in] FileName
        @param[in] ReadAdditive
        @param[in] AddNetRead """
        pass
    
    def SaveDemandFile(self, FileName, allMatrixDataInside, LayoutFile, editableOnly, nonDefaultOnly, nonEmptyTablesOnly):
        """! Save Demand file
        @param[in] FileName
        @param[in] allMatrixDataInside
        @param[in] LayoutFile
        @param[in] editableOnly
        @param[in] nonDefaultOnly
        @param[in] nonEmptyTablesOnly """
        pass
    
    def SaveSQLiteDatabase(self, DatabasePath, LayoutFile, editableOnly, nonDefaultOnly, activeNetElemsOnly, nonEmptyTablesOnly):
        """! Save SQLite DB
        @param[in] DatabasePath
        @param[in] LayoutFile
        @param[in] editableOnly
        @param[in] nonDefaultOnly
        @param[in] activeNetElemsOnly
        @param[in] nonEmptyTablesOnly """
        pass
    
    def ExportANMRoutes(self, FileName, ANMParaFilename, writeRoutes, writeMatrices):
        """! Export ANM routes
        @param[in] FileName
        @param[in] ANMParaFilename
        @param[in] writeRoutes
        @param[in] writeMatrices """
        pass
    
    def ExportANM(self, ANMExportPara):
        """! Export ANM file
        @param[in] ANMExportPara """
        pass
    
    def CreateCloudModel(self, CloudModelName):
        """! Create a new cloud model based on the current network
        @param[in] CloudModelName """
        pass
    
    def CreateNetReadRouteSearch(self):
        """! Create NetReadRouteSearch """
        pass
    
    def ImportPuTProject(self, FileName):
        """! Import PuT project (HAFAS, railML, PuT Supply from Visum
        @param[in] FileName """
        pass
    
    def ExportPuTProject(self, FileName):
        """! Export PuT project (railML)
        @param[in] FileName """
        pass
    
    def ExportVDV452(self, ExportDirectory, Exportparameter):
        """! Export VDV452 data
        @param[in] ExportDirectory
        @param[in] Exportparameter """
        pass
    
    def ImportShapefile(self, FileName, ImportShapefileParameter):
        """! ImportShapefile
        @param[in] FileName
        @param[in] ImportShapefileParameter """
        pass
    
    def ImportSaturn(self, SaturnFileName, OutputFileName, SaveNetFile):
        """! Import Saturn data
        @param[in] SaturnFileName
        @param[in] OutputFileName
        @param[in] SaveNetFile """
        pass
    
    def CreateExportANMPara(self):
        """! Create ExportANMPara object """
        pass
    
    def CreateImportMapFanDBPara(self):
        """! Create map fan db import parameter """
        pass
    
    def ImportANMProject(self, FileName):
        """! Import ANM Project
        @param[in] FileName """
        pass
    
    def ImportSynchro(self, FileName):
        """! Synchro import
        @param[in] FileName """
        pass
    
    def SaveAccessDatabaseUsingTableAttrSelection(self, FileName, Layout, activeNetElemsOnly):
        """! Save Access file using Layout
        @param[in] FileName
        @param[in] Layout
        @param[in] activeNetElemsOnly """
        pass
    
    def CreateAddNetReadController(self):
        """! Create AddNetRead Controller """
        pass
    
    def ExportGTFS(self, ExportDirectory, TransportationAttributeId, Exportparameter):
        """! Export Visum Network to General Transit Feed Specification
        @param[in] ExportDirectory
        @param[in] TransportationAttributeId
        @param[in] Exportparameter """
        pass
    
    def LoadAccessDatabase(self, DatabasePath, ReadAdditive, routeSearch, AddNetRead):
        """! Load Access file
        @param[in] DatabasePath
        @param[in] ReadAdditive
        @param[in] routeSearch
        @param[in] AddNetRead """
        pass
    
    def LoadNet(self, NetFile, ReadAdditive, routeSearch, AddNetRead, normalizePolygons, mergeSameCoordPolygonPoints, decimalsForMergeSameCoordPolygonPoints):
        """! Open network file
        @param[in] NetFile
        @param[in] ReadAdditive
        @param[in] routeSearch
        @param[in] AddNetRead
        @param[in] normalizePolygons
        @param[in] mergeSameCoordPolygonPoints
        @param[in] decimalsForMergeSameCoordPolygonPoints """
        pass
    
    def SaveDemandFileUsingTableAttrSelection(self, FileName, Layout, allMatrixDataInside):
        """! Save Demand file using Layout
        @param[in] FileName
        @param[in] Layout
        @param[in] allMatrixDataInside """
        pass
    
    def ImportOpenStreetMap(self, OpenStreetMapFileNames, ParamFileNames, SaveNetFile, Clipping, XCoordMin, YCoordMin, XCoordMax, YCoordMax):
        """! Import OpenStreetMap file
        @param[in] OpenStreetMapFileNames
        @param[in] ParamFileNames
        @param[in] SaveNetFile
        @param[in] Clipping
        @param[in] XCoordMin
        @param[in] YCoordMin
        @param[in] XCoordMax
        @param[in] YCoordMax """
        pass
    
    def SaveNet(self, NetFile, LayoutFile, editableOnly, nonDefaultOnly, activeNetElemsOnly, nonEmptyTablesOnly):
        """! Save Network
        @param[in] NetFile
        @param[in] LayoutFile
        @param[in] editableOnly
        @param[in] nonDefaultOnly
        @param[in] activeNetElemsOnly
        @param[in] nonEmptyTablesOnly """
        pass
    
    def ImportVDV452(self, ImportDirectory, OutputFileName, SaveNetFile, ImportBlocks):
        """! Import VDV452 data
        @param[in] ImportDirectory
        @param[in] OutputFileName
        @param[in] SaveNetFile
        @param[in] ImportBlocks """
        pass
    
    def LoadActiveNetworkObjectsFile(self, FileName):
        """! Load active network objects
        @param[in] FileName """
        pass
    
    def CreateExportGTFSPara(self):
        """! Create GTFS export parameter """
        pass
    
    def ImportEmmeProject(self, FileName):
        """! Import Emme project
        @param[in] FileName """
        pass
    
    def LoadVersion(self, VersionFile, convertFromImperial):
        """! Open version file
        @param[in] VersionFile
        @param[in] convertFromImperial """
        pass
    
    def ImportDBF(self, FileName, NameOfTable):
        """! Import DBF file
        @param[in] FileName
        @param[in] NameOfTable """
        pass
    
    def LoadFromMsSqlServerDatabase(self, ConnectionString, PassWord, ReadAdditive, routeSearch, AddNetRead):
        """! LoadFromMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] ReadAdditive
        @param[in] routeSearch
        @param[in] AddNetRead """
        pass
    
    def SaveAccessDatabase(self, DatabasePath, LayoutFile, editableOnly, nonDefaultOnly, activeNetElemsOnly, nonEmptyTablesOnly):
        """! Save Access file
        @param[in] DatabasePath
        @param[in] LayoutFile
        @param[in] editableOnly
        @param[in] nonDefaultOnly
        @param[in] activeNetElemsOnly
        @param[in] nonEmptyTablesOnly """
        pass
    
    def SaveVersion(self, VersionFile):
        """! Save version file
        @param[in] VersionFile """
        pass
    
    def CreateExportVDV452Para(self):
        """! Create VDV452 export parameter """
        pass
    
    def ImportPathSequences(self, FileName, PathSequenceSetNo):
        """! Import Path Sequences
        @param[in] FileName
        @param[in] PathSequenceSetNo """
        pass
    
    def SaveActiveNetworkObjectsFile(self, FileName):
        """! Save active network objects
        @param[in] FileName """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, LayoutFile, editableOnly, nonDefaultOnly, activeNetElemsOnly, setPrimaryKeys, nonEmptyTablesOnly):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] LayoutFile
        @param[in] editableOnly
        @param[in] nonDefaultOnly
        @param[in] activeNetElemsOnly
        @param[in] setPrimaryKeys
        @param[in] nonEmptyTablesOnly """
        pass
    
    def CreateImportGPXPara(self):
        """! Create GPX import parameter """
        pass
    
    def CreateExportShapeFilePara(self):
        """! Create ExportShapeFilePara """
        pass
    
    def ImportMapFanDB(self, ImportParameter):
        """! ImportMapFanDBData
        @param[in] ImportParameter """
        pass
    
class Messages:
    """! IMessages Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Count=Count()
        self.MaxCount=MaxCount()
    def Clear(self):
        """! Empty the collection """
        pass
    
    def Item(self, Index):
        """! Access to message
        @param[in] Index """
        pass
    
class ScenarioManagement:
    """! IScenarioManagement Interface """

    def __init__(self):
        """Contains all attributes"""
        self.CurrentProject=CurrentProject()
    def CloseProject(self):
        """! Close current scenario management project """
        pass
    
    def OpenProject(self, FileName):
        """! Open existing scenario management project
        @param[in] FileName """
        pass
    
    def CreateNewProject(self, ProjectName, BaseFolderName, BaseVersionFileName):
        """! Create new scenario management project
        @param[in] ProjectName
        @param[in] BaseFolderName
        @param[in] BaseVersionFileName """
        pass
    
class Graphic:
    """! IGraphic Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Backgrounds=Backgrounds()
        self.NodeFlows=NodeFlows()
        self.SynchroMode=SynchroMode()
        self.StopDrawing=StopDrawing()
    def ShowMinimized(self):
        """! Minimize Window """
        pass
    
    def AddBackground(self, FileName):
        """! Add a background with world file
        @param[in] FileName """
        pass
    
    def GetWindowHandle(self):
        """! Get Window Handle """
        pass
    
    def TileHorizontally(self):
        """! Tile horizontally """
        pass
    
    def ExportNodeFlowGraphics(self, Nodes):
        """! ExportNodeFlowGraphics
        @param[in] Nodes """
        pass
    
    def Draw(self):
        """! Draw """
        pass
    
    def ShowNormal(self):
        """! Normal Window """
        pass
    
    def SetMainWindowSize(self, width, height):
        """! SetMainWindowSize
        @param[in] width
        @param[in] height """
        pass
    
    def SetWindow(self, xmin, ymin, xmax, ymax):
        """! Set Window
        @param[in] xmin
        @param[in] ymin
        @param[in] xmax
        @param[in] ymax """
        pass
    
    def WaitForIdle(self):
        """! wait for Visum ... """
        pass
    
    def AddBackgroundOnPos(self, FileName, xmin, ymin, xmax, ymax):
        """! Add a background with coordinates
        @param[in] FileName
        @param[in] xmin
        @param[in] ymin
        @param[in] xmax
        @param[in] ymax """
        pass
    
    def Cascade(self):
        """! Cascade """
        pass
    
    def ExportOptimizedSVG(self, FileName, optimization):
        """! ExportOptimizedSVG
        @param[in] FileName
        @param[in] optimization """
        pass
    
    def ExportSVG(self, FileName, ExportSvgParameter):
        """! ExportSVG
        @param[in] FileName
        @param[in] ExportSvgParameter """
        pass
    
    def GetWindow(self, xmin, ymin, xmax, ymax):
        """! Get Window
        @param[in] xmin
        @param[in] ymin
        @param[in] xmax
        @param[in] ymax """
        pass
    
    def ExportNetworkImageFile(self, FileName, xMinNet, yMinNet, xMaxNet, yMaxNet, pixelWidthOfOutputBitmap, dotsPerInch, fileQuality):
        """! ExportNetworkImageFile
        @param[in] FileName
        @param[in] xMinNet
        @param[in] yMinNet
        @param[in] xMaxNet
        @param[in] yMaxNet
        @param[in] pixelWidthOfOutputBitmap
        @param[in] dotsPerInch
        @param[in] fileQuality """
        pass
    
    def GetScaleOfView(self, Scale):
        """! GetScaleOfView
        @param[in] Scale """
        pass
    
    def SetVisumForegroundWindow(self):
        """! Set Visum in Foreground """
        pass
    
    def Screenshot(self, FileName, screenResFactor):
        """! Screenshot
        @param[in] FileName
        @param[in] screenResFactor """
        pass
    
    def DisplayEntireNetwork(self):
        """! Display Entire Network """
        pass
    
    def MaximizeNetWindow(self):
        """! Maximize network view """
        pass
    
    def SetMainWindowPos(self, xmin, ymin, width, height):
        """! SetMainWindowPos
        @param[in] xmin
        @param[in] ymin
        @param[in] width
        @param[in] height """
        pass
    
    def Autozoom(self, Object):
        """! Autozoom
        @param[in] Object """
        pass
    
    def PrintNetEditor2D(self, NameOfPrintJob, PrinterName, PaperSize, Orientation):
        """! Print 2D network editor view
        @param[in] NameOfPrintJob
        @param[in] PrinterName
        @param[in] PaperSize
        @param[in] Orientation """
        pass
    
    def TileVertically(self):
        """! Tile vertically """
        pass
    
    def Redraw(self):
        """! Redraw """
        pass
    
    def WriteSVG(self, FileName, useNonScalingStroke, copyPictures):
        """! Write SVG
        @param[in] FileName
        @param[in] useNonScalingStroke
        @param[in] copyPictures """
        pass
    
    def SetScaleOfView(self, Scale):
        """! SetScaleOfView
        @param[in] Scale """
        pass
    
    def ShowMaximized(self):
        """! Maximize Window """
        pass
    
    def GetNetWindowHandle(self):
        """! Get NetWindow Handle """
        pass
    
    def ExportNodeFlowGraphic(self, FileName, Node):
        """! ExportNodeFlowGraphic
        @param[in] FileName
        @param[in] Node """
        pass
    
    def ExportBoundingBoxAsSVG(self, FileName, xMinNet, yMinNet, xMaxNet, yMaxNet, pixelWidth, ExportSvgParameter):
        """! ExportBoundingBoxAsSVG
        @param[in] FileName
        @param[in] xMinNet
        @param[in] yMinNet
        @param[in] xMaxNet
        @param[in] yMaxNet
        @param[in] pixelWidth
        @param[in] ExportSvgParameter """
        pass
    
    def GetMainWindowPos(self, xmin, ymin, width, height):
        """! GetMainWindowPos
        @param[in] xmin
        @param[in] ymin
        @param[in] width
        @param[in] height """
        pass
    
class Analysis:
    """! IAnalysis Interface """

    def __init__(self):
        """Contains all attributes"""
        self.RouteSearchPuT=RouteSearchPuT()
        self.RouteSearchPuTSys=RouteSearchPuTSys()
        self.Isochrones=Isochrones()
        self.RouteSearchPrT=RouteSearchPrT()

class Procedures:
    """! IProcedures Interface """

    def __init__(self):
        """Contains all attributes"""
        self.OperationExecutor=OperationExecutor()
        self.OperationVariables=OperationVariables()
        self.Functions=Functions()
        self.Operations=Operations()
        self.IsExecuting=IsExecuting()
    def UsedTerritoryPuTDetailType(self):
        """! Get used TerritoryPuTDetailType """
        pass
    
    def OpenXmlWithOptions(self, ProcParaPath, readOperations, readFunctions, roType, insertPosition, resetFunctionsBeforeReading):
        """! Open xml with options
        @param[in] ProcParaPath
        @param[in] readOperations
        @param[in] readFunctions
        @param[in] roType
        @param[in] insertPosition
        @param[in] resetFunctionsBeforeReading """
        pass
    
    def AssignmentMethod(self, DSeg):
        """! Get Assignment method for demand segment
        @param[in] DSeg """
        pass
    
    def Open(self, ProcParaPath, readOperations, readFunctions, appendProcedures):
        """! Open procedure parameter file
        @param[in] ProcParaPath
        @param[in] readOperations
        @param[in] readFunctions
        @param[in] appendProcedures """
        pass
    
    def IsCalculationFinished(self, FileName):
        """! Check if Calculation of Procedure Flow on Computation Node is finished
        @param[in] FileName """
        pass
    
    def ExecuteOnComputationNode(self, NameOfComputationNode):
        """! Execute Procedure Flow on Computation Node
        @param[in] NameOfComputationNode """
        pass
    
    def ExecuteWithCallback(self, cb):
        """! Execute with a callback provided by the client
        @param[in] cb """
        pass
    
    def OperationCalculated(self, op):
        """! Is Operation calculated
        @param[in] op """
        pass
    
    def Execute(self):
        """! Execute """
        pass
    
    def AssignmentCalculated(self, DSeg):
        """! Is Assignment for Demand Segment calculated
        @param[in] DSeg """
        pass
    
    def Save(self, ProcParaPath, writeOperations, writeFunctions):
        """! Save procedure parameter xml file
        @param[in] ProcParaPath
        @param[in] writeOperations
        @param[in] writeFunctions """
        pass
    
    def OpenXml(self, ProcParaPath, ReadAdditive):
        """! Deprecated. Use 'Open'.
        @param[in] ProcParaPath
        @param[in] ReadAdditive """
        pass
    
    def SaveXml(self, ProcParaPath):
        """! Deprecated. Use 'Save'.
        @param[in] ProcParaPath """
        pass
    
class UserPreferences:
    """! IUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        self.NetworkUserPreferences=NetworkUserPreferences()
        self.TelemetryUserPreferences=TelemetryUserPreferences()
        self.EnvironmentUserPreferences=EnvironmentUserPreferences()
        self.FileAndProtocolUserPreferences=FileAndProtocolUserPreferences()
        self.GUIUserPreferences=GUIUserPreferences()
        self.FormatUserPreferences=FormatUserPreferences()
        self.SaveUserPreferencesToRegistryOnClose=SaveUserPreferencesToRegistryOnClose()
        self.DocumentName=DocumentName()
        self.ActProtTraceLevel=ActProtTraceLevel()
        self.AllowMultithreading=AllowMultithreading()
        self.DecimalSeparator=DecimalSeparator()
        self.Backup=Backup()
    def Open(self, FileName):
        """! Open XML File
        @param[in] FileName """
        pass
    
    def Save(self, FileName):
        """! Save XML File
        @param[in] FileName """
        pass
    
class CreatePrTIcaAssQualityList:
    """! IPrTIcaAssQualityList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDemandStratumList:
    """! IDemandStratumList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDemandGroupList:
    """! IDemandGroupList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePrTPathSearchLegList:
    """! IPrTPathSearchLegList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDirLineTransferWalkTimeList:
    """! IDirLineTransferWalkTimeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateNodeList:
    """! INodeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateActivityExecutionList:
    """! IActivityExecutionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Person):
        """! SetObjects
        @param[in] Person """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMainLineList:
    """! IMainLineList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateCountLocationList:
    """! ICountLocationList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateVehJourneySectionList:
    """! IVehJourneySectionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, newVehJourney):
        """! SetObjects
        @param[in] value
        @param[in] newVehJourney """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStopBaseList:
    """! IStopBaseList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePathSequenceActivityList:
    """! IPathSequenceActivityList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateZoneList:
    """! IZoneList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTimeProfileList:
    """! ITimeProfileList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDeliveryConceptList:
    """! DeliveryConceptList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePrTPathLinkList:
    """! IPrTPathLinkList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, newDemandSeg, PathTypeSelection, OnlyActive, ListFormat):
        """! SetObjects
        @param[in] Zone
        @param[in] newDemandSeg
        @param[in] PathTypeSelection
        @param[in] OnlyActive
        @param[in] ListFormat """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, fromZone, toZone, PathIndex, PathLegIndex):
        """! AddMarking
        @param[in] fromZone
        @param[in] toZone
        @param[in] PathIndex
        @param[in] PathLegIndex """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateGeometryTemplateList:
    """! IGeometryTemplateList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTimeIntervalSetList:
    """! TimeIntervalSetList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateBlockVersionList:
    """! BlockVersionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTimeProfileItemList:
    """! ITimeProfileItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SectionViewMode=SectionViewMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, newTimeProfile):
        """! SetObjects
        @param[in] value
        @param[in] newTimeProfile """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateCrossWalkList:
    """! ICrossWalkList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLinkTypeList:
    """! ILinkTypeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateCameraPositionList:
    """! ICameraPositionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateFareSystemList:
    """! IFareSystemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateUserDefinedGroupList:
    """! IUserDefinedGroupList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMatrixList:
    """! IMatrixList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTurnList:
    """! ITurnList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def SetCrossSection(self, value):
        """! SetCrossSection
        @param[in] value """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateActivityList:
    """! IActivityList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStopAreaList:
    """! IStopAreaList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLineRouteList:
    """! ILineRouteList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePathSequenceList:
    """! IPathSequenceList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, PathSequenceSet, PathTypeSelection):
        """! SetObjects
        @param[in] Zone
        @param[in] PathSequenceSet
        @param[in] PathTypeSelection """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, fromZone, toZone, PathIndex):
        """! AddMarking
        @param[in] fromZone
        @param[in] toZone
        @param[in] PathIndex """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateSysRouteList:
    """! ISysRouteList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateHolidaysList:
    """! IHolidaysList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateVehUnitList:
    """! IVehUnitList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTRelationList:
    """! IPuTRelationList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, DemandSeg, PathTypeSelection):
        """! SetObjects
        @param[in] Zone
        @param[in] DemandSeg
        @param[in] PathTypeSelection """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, fromZone, toZone):
        """! AddMarking
        @param[in] fromZone
        @param[in] toZone """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStatisticsNetList:
    """! StatisticsNetList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateSharingStationList:
    """! SharingStationList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive):
        """! SetObjects
        @param[in] OnlyActive """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLegTemplateList:
    """! ILegTemplateList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStopPointTimeTableList:
    """! IStopPointTimeTableList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive, StopPoint, TimeProfile):
        """! SetObjects
        @param[in] OnlyActive
        @param[in] StopPoint
        @param[in] TimeProfile """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateODPairList:
    """! IODPairList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def SetCrossSection(self, value):
        """! SetCrossSection
        @param[in] value """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePathSequenceItemList:
    """! IPathSequenceItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, PathSequenceSet, PathTypeSelection, RestrictToMarkedPathSequences):
        """! SetObjects
        @param[in] Zone
        @param[in] PathSequenceSet
        @param[in] PathTypeSelection
        @param[in] RestrictToMarkedPathSequences """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, fromZone, toZone, PathIndex, ItemIndex):
        """! AddMarking
        @param[in] fromZone
        @param[in] toZone
        @param[in] PathIndex
        @param[in] ItemIndex """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateNetParaList:
    """! INetParaList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTerritoryBaseList:
    """! ITerritoryBaseList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDemandSegmentList:
    """! IDemandSegmentList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateSectorList:
    """! SectorList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTTSysTransferList:
    """! IPuTTSysTransferList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, newDemandSeg, PathTypeSelection):
        """! SetObjects
        @param[in] newDemandSeg
        @param[in] PathTypeSelection """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStopPointBaseList:
    """! IStopPointBaseList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateHouseholdList:
    """! IHouseholdList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Location):
        """! SetObjects
        @param[in] Location """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateAssignmentAnalysisList:
    """! AssignmentAnalysisList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateRestrictedTrafficAreaList:
    """! IRestrictedTrafficAreaList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTerritoryPuTDetailList:
    """! ITerritoryPuTDetailList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, onlyExistingCombinations):
        """! SetObjects
        @param[in] value
        @param[in] onlyExistingCombinations """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateConnectorList:
    """! IConnectorList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def SetCrossSection(self, value):
        """! SetCrossSection
        @param[in] value """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStoryboardActionList:
    """! IStoryboardActionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateCoupleSectionList:
    """! ICoupleSectionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePathSequenceSetList:
    """! IPathSequenceSetList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTPathLegList:
    """! IPuTPathLegList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, DemandSeg, PathTypeSelection, activeTimeProfilesOnly, useRandomRound, randomRoundDecPlaces, PuTOnly, ListFormat, ShowMultipleDemandSegments):
        """! SetObjects
        @param[in] Zone
        @param[in] DemandSeg
        @param[in] PathTypeSelection
        @param[in] activeTimeProfilesOnly
        @param[in] useRandomRound
        @param[in] randomRoundDecPlaces
        @param[in] PuTOnly
        @param[in] ListFormat
        @param[in] ShowMultipleDemandSegments """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, fromZone, toZone, PathIndex, PathLegIndex):
        """! AddMarking
        @param[in] fromZone
        @param[in] toZone
        @param[in] PathIndex
        @param[in] PathLegIndex """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateConnectingJourneyList:
    """! IConnectingJourneyList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive, newStop, RestrictToReachedOrMissed, NewVehicleJourney, RestrictToArrivingOrDeparting):
        """! SetObjects
        @param[in] OnlyActive
        @param[in] newStop
        @param[in] RestrictToReachedOrMissed
        @param[in] NewVehicleJourney
        @param[in] RestrictToArrivingOrDeparting """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePOIList:
    """! IPOIList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, Category):
        """! SetObjects
        @param[in] value
        @param[in] Category """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMatrixTollList:
    """! IMatrixTollList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, resTrafArea):
        """! SetObjects
        @param[in] value
        @param[in] resTrafArea """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMainZoneList:
    """! IMainZoneList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateEmissionList:
    """! EmissionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLinkList:
    """! ILinkList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def SetCrossSection(self, value):
        """! SetCrossSection
        @param[in] value """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateInformationSignList:
    """! IInformationSignList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateVehCombList:
    """! IVehCombList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLocationList:
    """! ILocationList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateActChainList:
    """! IActChainList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTableEntryList:
    """! TableEntryList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, TableDefinition):
        """! SetObjects
        @param[in] TableDefinition """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateVehJourneyList:
    """! IVehJourneyList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDemandModelList:
    """! IDemandModelList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateModeList:
    """! IModeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLineRouteItemPuTDetailList:
    """! LineRouteItemPuTDetailList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive):
        """! SetObjects
        @param[in] OnlyActive """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTerritoryPuTDetailVehJourneyItemList:
    """! ITerritoryPuTDetailVehJourneyItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTSysList:
    """! ITSysList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLineList:
    """! ILineList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTSysTransferWalkTimeList:
    """! ITSysTransferWalkTimeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLaneTemplateList:
    """! ILaneTemplateList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateBlockItemTypeList:
    """! BlockItemTypeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateSignalControlList:
    """! ISignalControlList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePrTAssQualityList:
    """! IPrTAssQualityList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateVehJourneyItemList:
    """! IVehJourneyItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SectionViewMode=SectionViewMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, newVehJourney):
        """! SetObjects
        @param[in] value
        @param[in] newVehJourney """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStopTransferWalkTimeList:
    """! IStopTransferWalkTimeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStopPointPuTDetailList:
    """! IStopPointPuTDetailList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, onlyExistingCombinations):
        """! SetObjects
        @param[in] value
        @param[in] onlyExistingCombinations """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateActPairList:
    """! IActPairList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePropagationLinkInfoList:
    """! PropagationLinkInfoList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateValidDayList:
    """! IValidDayList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateBlockList:
    """! LineBlockingBaseList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, newVersion):
        """! SetObjects
        @param[in] newVersion """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePrTPathList:
    """! IPrTPathList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, newDemandSeg, PathTypeSelection):
        """! SetObjects
        @param[in] Zone
        @param[in] newDemandSeg
        @param[in] PathTypeSelection """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStoryboardList:
    """! IStoryboardList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateScheduleList:
    """! IScheduleList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Person):
        """! SetObjects
        @param[in] Person """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMainNodeList:
    """! IMainNodeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePrTSimulationBasedAssQualityList:
    """! IPrTSimulationBasedAssQualityList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateChainedUpVehJourneySectionList:
    """! IChainedUpVehJourneySectionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive, Stop):
        """! SetObjects
        @param[in] OnlyActive
        @param[in] Stop """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateActivityLocationList:
    """! IActivityLocationList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Location):
        """! SetObjects
        @param[in] Location """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMainODPairList:
    """! IMainODPairList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def SetCrossSection(self, value):
        """! SetCrossSection
        @param[in] value """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateSysRouteItemList:
    """! ISysRouteItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SectionViewMode=SectionViewMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, newSysRoute):
        """! SetObjects
        @param[in] value
        @param[in] newSysRoute """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateAttributeList:
    """! IAttributeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTTransferList:
    """! IPuTTransferList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetPuTTransferListParameters=GetPuTTransferListParameters()
        self.Attributes=Attributes()
        self.NumActiveElements=NumActiveElements()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, newDemandSeg, newStop, newTimeProfile, PathTypeSelection, ShowMultipleDemandSegments):
        """! SetObjects
        @param[in] newDemandSeg
        @param[in] newStop
        @param[in] newTimeProfile
        @param[in] PathTypeSelection
        @param[in] ShowMultipleDemandSegments """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def SetObjectsExtended(self, PuTTransferListPara):
        """! SetObjects with parameter object
        @param[in] PuTTransferListPara """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLineRouteItemList:
    """! ILineRouteItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SectionViewMode=SectionViewMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value, newLineRoute):
        """! SetObjects
        @param[in] value
        @param[in] newLineRoute """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateSignalGroupList:
    """! ISignalGroupList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateNodeLegList:
    """! INodeLegList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTableDefinitionList:
    """! TableDefinitionList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateScreenlineList:
    """! IScreenlineList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTripList:
    """! ITripList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Person):
        """! SetObjects
        @param[in] Person """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePathItemList:
    """! IPathItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, newPathSet, OnlyActive):
        """! SetObjects
        @param[in] Zone
        @param[in] newPathSet
        @param[in] OnlyActive """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, PathIndex, PathLegIndex):
        """! AddMarking
        @param[in] PathIndex
        @param[in] PathLegIndex """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTimeProfileTransferWalkTimeList:
    """! ITimeProfileTransferWalkTimeList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateDetectorList:
    """! IDetectorList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePathList:
    """! IPathList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, newPathSet, PathTypeSelection):
        """! SetObjects
        @param[in] Zone
        @param[in] newPathSet
        @param[in] PathTypeSelection """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateOperatingPeriodList:
    """! IOperatingPeriodList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateMainTurnList:
    """! IMainTurnList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, value):
        """! SetObjects
        @param[in] value """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def SetCrossSection(self, value):
        """! SetCrossSection
        @param[in] value """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTPathSearchLegList:
    """! IPuTPathSearchLegList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateOperatorList:
    """! IOperatorList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateNodeLegLaneList:
    """! INodeLegLaneList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTPathList:
    """! IPuTPathList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Zone, DemandSeg, PathTypeSelection, useRandomRound, randomRoundDecPlaces, ShowMultipleDemandSegments):
        """! SetObjects
        @param[in] Zone
        @param[in] DemandSeg
        @param[in] PathTypeSelection
        @param[in] useRandomRound
        @param[in] randomRoundDecPlaces
        @param[in] ShowMultipleDemandSegments """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def ClearMarking(self):
        """! ClearMarking """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddMarking(self, fromZone, toZone, PathIndex):
        """! AddMarking
        @param[in] fromZone
        @param[in] toZone
        @param[in] PathIndex """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTripRequestList:
    """! ITripRequestList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, DSeg):
        """! SetObjects
        @param[in] DSeg """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateCoupleSectionItemList:
    """! ICoupleSectionItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePersonList:
    """! IPersonList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Location, PersonListLocationMode):
        """! SetObjects
        @param[in] Location
        @param[in] PersonListLocationMode """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateTourList:
    """! ITourList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, Person):
        """! SetObjects
        @param[in] Person """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateFareZoneList:
    """! IFareZoneList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePuTStatList:
    """! PuTStatList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreatePlannedConnectingJourneyList:
    """! IPlannedConnectingJourneyList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumActiveElements=NumActiveElements()
        self.SynchroMode=SynchroMode()
        self.NumColumns=NumColumns()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive, newStop, NewVehicleJourney, RestrictToArrivingOrDeparting):
        """! SetObjects
        @param[in] OnlyActive
        @param[in] newStop
        @param[in] NewVehicleJourney
        @param[in] RestrictToArrivingOrDeparting """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateBlockItemList:
    """! LineBlockingItemList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SetObjects(self, OnlyActive, newBlock):
        """! SetObjects
        @param[in] OnlyActive
        @param[in] newBlock """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateStageList:
    """! IStageList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateCrosswalkTemplateList:
    """! ICrosswalkTemplateList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CreateLaneTurnRelList:
    """! ILaneTurnRelList Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Attributes=Attributes()
        self.IsSortable=IsSortable()
        self.NumColumns=NumColumns()
        self.NumActiveElements=NumActiveElements()
    def GetBottomRightCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def CopyListToTable(self, TableDefinition, fromRow, toRow):
        """! Copy the list's content to existing table
        @param[in] TableDefinition
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def AddAllColumns(self, EditableAttributesOnly):
        """! Add all direct attributes
        @param[in] EditableAttributesOnly """
        pass
    
    def GetTopLeftCornerY(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def Sum(self, Column):
        """! Sum
        @param[in] Column """
        pass
    
    def CreateTableFromList(self, TableDefinitionName, fromRow, toRow):
        """! Copy the list's content to new table
        @param[in] TableDefinitionName
        @param[in] fromRow
        @param[in] toRow """
        pass
    
    def RemoveColumn(self, AttributeID):
        """! Remove a single attribute or a group of sub-attributes
        @param[in] AttributeID """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def SaveToAccessDatabase(self, FileName, TableName):
        """! SaveToAccessDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def SaveToSQLiteDatabase(self, FileName, TableName):
        """! SaveToSQLiteDatabase
        @param[in] FileName
        @param[in] TableName """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def PasteFromClipboard(self):
        """! PasteFromClipboard """
        pass
    
    def GetTopLeftCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToAttributeFile(self, FileName, Separator, keyind, writeAdditionalHeader):
        """! SaveToAttributeFile
        @param[in] FileName
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def IsColumnEditable(self, Column):
        """! IsColumnEditable
        @param[in] Column """
        pass
    
    def AddColumnsForCategory(self, Category):
        """! Add columns for category (experimental)
        @param[in] Category """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def AttState(self, Column):
        """! Attribute define state
        @param[in] Column """
        pass
    
    def SaveToClipboard(self, Separator, keyind, writeAdditionalHeader):
        """! SaveToClipboard
        @param[in] Separator
        @param[in] keyind
        @param[in] writeAdditionalHeader """
        pass
    
    def RemoveColumnsForNonEditableAttributes(self):
        """! Remove all non editable attributes """
        pass
    
    def Show(self):
        """! Show """
        pass
    
    def AddDefaultColumns(self):
        """! Add default columns """
        pass
    
    def SaveToArray(self, firstObject, lastObject):
        """! SaveToArray
        @param[in] firstObject
        @param[in] lastObject """
        pass
    
    def AddColumnsForUserDefinedGroup(self, group):
        """! Add columns for user defined groups (experimental)
        @param[in] group """
        pass
    
    def Max(self, Column):
        """! Max
        @param[in] Column """
        pass
    
    def StringFormat(self, Column):
        """! StringFormat
        @param[in] Column """
        pass
    
    def Close(self):
        """! Close """
        pass
    
    def AddColumnsForAllUserDefinedAttributes(self):
        """! Add columns for for all user-defined attributes """
        pass
    
    def Average(self, Column):
        """! Average
        @param[in] Column """
        pass
    
    def GetBottomRightCornerX(self, row, col):
        """! Screen Pos. of cell
        @param[in] row
        @param[in] col """
        pass
    
    def SaveToMsSqlServerDatabase(self, ConnectionString, PassWord, TableName):
        """! SaveToMsSqlServerDatabase
        @param[in] ConnectionString
        @param[in] PassWord
        @param[in] TableName """
        pass
    
    def AddKeyColumns(self, AddMandatoryColumns):
        """! Add all key and optionally all mandatory attributes
        @param[in] AddMandatoryColumns """
        pass
    
    def RemoveAllColumns(self):
        """! Remove all columns """
        pass
    
    def Min(self, Column):
        """! Min
        @param[in] Column """
        pass
    
class CurrentLicenseInfo:
    """! ILicenseInfoInterface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribut):
        """! Get attribute value
        @param[in] Attribut """
        pass
    
class Turns:
    """! ITurns Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GroupGPA=GroupGPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def TurnExistsByKey(self, fromNode, viaNode, toNode):
        """! Does turn exist?
        @param[in] fromNode
        @param[in] viaNode
        @param[in] toNode """
        pass
    
    def GetMultiAttValuesAtTime(self, AttID, DayIndex, DayTime, OnlyActive):
        """! Get all TimeVaryingAttributes at timepoint.
        @param[in] AttID
        @param[in] DayIndex
        @param[in] DayTime
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def SetDefaultsFromGeometryAndTurnStandard(self, OnlyActive, Attributes):
        """! Set default values from geometry and turn standard
        @param[in] OnlyActive
        @param[in] Attributes """
        pass
    
    def ItemByKey(self, fromNode, viaNode, toNode):
        """! Get item by key
        @param[in] fromNode
        @param[in] viaNode
        @param[in] toNode """
        pass
    
    def ClearTimeVaryingAttValues(self, AttID):
        """! Clear all TimeVaryingAttributes with ID.
        @param[in] AttID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def DeleteTimeVaryingAttribute(self, AttID):
        """! Delete TimeVaryingAttribute by ID.
        @param[in] AttID """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiTimeVaryingAttValues(self, AttID, OnlyActive):
        """! Get all TimeVaryingAttributes.
        @param[in] AttID
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddTimeVaryingAttribute(self, AttID):
        """! Add TimeVaryingAttribute with ID.
        @param[in] AttID """
        pass
    
class ActivityLocations:
    """! ActivityLocations Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Activity, Location):
        """! Get item by key
        @param[in] Activity
        @param[in] Location """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TableDefinitions:
    """! ITableDefinitions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, TableDefinitionName):
        """! Get item by key
        @param[in] TableDefinitionName """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class VehicleJourneys:
    """! IVehicleJourneys Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get item by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def MaximizeCouplings(self, onlyActiveVehJourneys):
        """! Maximize range of existing couplings between vehicle journeys
        @param[in] onlyActiveVehJourneys """
        pass
    
    def RemoveAllItems(self, onlyActiveVehJourneys):
        """! Remove all vehicle journey items
        @param[in] onlyActiveVehJourneys """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def Aggregate(self, onlyActiveVehJourneys, aggregateVehJourneySections):
        """! Aggregate vehicle journeys within time profiles
        @param[in] onlyActiveVehJourneys
        @param[in] aggregateVehJourneySections """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
    def CreateAllPossibleCouplings(self, onlyActiveVehJourneys, onlyIdenticalTSys, onlyIdenticalOperators, sameLengths, sameBoardAndAlight, minimumShareOfSamePath, minimumLengthOfSamePath):
        """! Detect and create possible couplings between vehicle journeys
        @param[in] onlyActiveVehJourneys
        @param[in] onlyIdenticalTSys
        @param[in] onlyIdenticalOperators
        @param[in] sameLengths
        @param[in] sameBoardAndAlight
        @param[in] minimumShareOfSamePath
        @param[in] minimumLengthOfSamePath """
        pass
    
class MainZones:
    """! IMainZones Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def ConvertInto(self, TargetNetObjName, targetCategory, SourceForKeyAttID, DoNothingInCaseOfConflict, AllocateObjectsWithinPolygon, OnlyActive):
        """! Convert surfaces
        @param[in] TargetNetObjName
        @param[in] targetCategory
        @param[in] SourceForKeyAttID
        @param[in] DoNothingInCaseOfConflict
        @param[in] AllocateObjectsWithinPolygon
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, mainZoneNo):
        """! Get item by key
        @param[in] mainZoneNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def NormalizeSurfaces(self, OnlyActive):
        """! Normalize surfaces
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class LineRouteItems:
    """! ILineRouteItems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def MakeRoutePointsTimeProfileItems(self, OnlyActive):
        """! Make a profile point in any profile
        @param[in] OnlyActive """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def RemoveFirstZigZagRouting(self):
        """! Remove the first zig zag routing """
        pass
    
    def ItemByKey(self, LineRoute, Index):
        """! Access via line route and line route item index
        @param[in] LineRoute
        @param[in] Index """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Sectors:
    """! ISectors Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, SectorCode):
        """! Get item by key
        @param[in] SectorCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class BlockItems:
    """! IBlockItems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def ReplaceVehicleJourneyBlockItemsByEmptyTrips(self, RemoveUnusedVehJourneySections):
        """! Replace block items of type vehicle journey by empty trip items
        @param[in] RemoveUnusedVehJourneySections """
        pass
    
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, BlockNo, Index):
        """! Access via block no and block item index
        @param[in] BlockNo
        @param[in] Index """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Detectors:
    """! IDetectors Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DetectorNo):
        """! Access via Detector No.
        @param[in] DetectorNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class SignalControls:
    """! ISignalControls Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, SignalControlNo):
        """! Get item by key
        @param[in] SignalControlNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class BlockVersions:
    """! IBlockVersions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Access via block version No.
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def Activate(self, BlockVersion):
        """! Set active block version
        @param[in] BlockVersion """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
    def JoinBlocks(self):
        """! Join blocks """
        pass
    
class NotepadLines:
    """! INotepadLines Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Index):
        """! Get item by key
        @param[in] Index """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class StructuralProps:
    """! StructuralProps Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, StructuralPropCode):
        """! Get item by key
        @param[in] StructuralPropCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class SignalGroups:
    """! ISignalGroups Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, SignalControl, SignalGroupNo):
        """! Get item by key
        @param[in] SignalControl
        @param[in] SignalGroupNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class ValidDaysCont:
    """! IValidDaysCont Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Access via valid days No.
        @param[in] no """
        pass
    
    def MergeEqualValidDays(self):
        """! Merge equal objects """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GuessOperatingPeriods(self):
        """! Guess operating periods """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class VehicleJourneySections:
    """! IVehicleJourneySections Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, VehJourneyNo, VehJourneySectionNo):
        """! Get item by key
        @param[in] VehJourneyNo
        @param[in] VehJourneySectionNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def ReplaceVehicleCombination(self, existingVehicleCombination, firstNewVehicleCombination, numberOfFirst, secondNewVehicleCombination, numberOfSecond, thirdNewVehicleCombination, numberOfThird, OnlyActive):
        """! Replace vehicle combination
        @param[in] existingVehicleCombination
        @param[in] firstNewVehicleCombination
        @param[in] numberOfFirst
        @param[in] secondNewVehicleCombination
        @param[in] numberOfSecond
        @param[in] thirdNewVehicleCombination
        @param[in] numberOfThird
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def NormalizeVehJourneySections(self, OnlyActive):
        """! Normalize vehicle journey sections
        @param[in] OnlyActive """
        pass
    
class Stops:
    """! IStops Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get item by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Attributes:
    """! IAttributes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetTableShortName=GetTableShortName()
        self.GetTableLongName=GetTableLongName()
        self.GetAll=GetAll()
    def GetCategories(self):
        """!  """
        pass
    
    def GetUserDefinedGroups(self):
        """!  """
        pass
    
    def ItemByKey(self, AttrID):
        """! 
        @param[in] AttrID """
        pass
    
    def GetCategoriesAndUserDefinedGroups(self, udaPrefix):
        """! 
        @param[in] udaPrefix """
        pass
    
    def GetLongName(self, AttrID):
        """! 
        @param[in] AttrID """
        pass
    
    def GetShortName(self, AttrID):
        """! 
        @param[in] AttrID """
        pass
    
class LegTemplates:
    """! ILegTemplates Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, LegTemplateNo):
        """! Get item by key
        @param[in] LegTemplateNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Storyboards:
    """! IStoryboards Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get storyboard by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class DemandTimeSeriesCont:
    """! DemandTimeSeriesCont Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DemandTimeSeriesNo):
        """! Get item by key
        @param[in] DemandTimeSeriesNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class VehJourneySections:
    """! IVehicleJourneySections Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, VehJourneyNo, VehJourneySectionNo):
        """! Get item by key
        @param[in] VehJourneyNo
        @param[in] VehJourneySectionNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def ReplaceVehicleCombination(self, existingVehicleCombination, firstNewVehicleCombination, numberOfFirst, secondNewVehicleCombination, numberOfSecond, thirdNewVehicleCombination, numberOfThird, OnlyActive):
        """! Replace vehicle combination
        @param[in] existingVehicleCombination
        @param[in] firstNewVehicleCombination
        @param[in] numberOfFirst
        @param[in] secondNewVehicleCombination
        @param[in] numberOfSecond
        @param[in] thirdNewVehicleCombination
        @param[in] numberOfThird
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def NormalizeVehJourneySections(self, OnlyActive):
        """! Normalize vehicle journey sections
        @param[in] OnlyActive """
        pass
    
class ActChains:
    """! ActChains Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByActivities(self, ActivityCodes):
        """! Get item by activities
        @param[in] ActivityCodes """
        pass
    
    def ItemByKey(self, ActChainCode):
        """! Get item by key
        @param[in] ActChainCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class OperatingPeriods:
    """! IOperatingPeriods Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, OperatingPeriodNo):
        """! Get item by key
        @param[in] OperatingPeriodNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def SetOperatingPeriodsToVehicleJourneySections(self, OnlyActive, RemoveObsoleteValidDays):
        """! Set Operating Periods to Vehicle Journey Sections
        @param[in] OnlyActive
        @param[in] RemoveObsoleteValidDays """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class RestrictedTrafficAreas:
    """! IRestrictedTrafficAreas Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def ConvertInto(self, TargetNetObjName, targetCategory, SourceForKeyAttID, DoNothingInCaseOfConflict, AllocateObjectsWithinPolygon, OnlyActive):
        """! Convert surfaces
        @param[in] TargetNetObjName
        @param[in] targetCategory
        @param[in] SourceForKeyAttID
        @param[in] DoNothingInCaseOfConflict
        @param[in] AllocateObjectsWithinPolygon
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, resTrafAreaNo):
        """! Get item by key
        @param[in] resTrafAreaNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def NormalizeSurfaces(self, OnlyActive):
        """! Normalize surfaces
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Modes:
    """! IModes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, ModeCode):
        """! Get item by key
        @param[in] ModeCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TimeIntervalSets:
    """! ITimeIntervalSets Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, TimeIntervalSetNo):
        """! Get item by key
        @param[in] TimeIntervalSetNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class SystemRoutes:
    """! ISystemRoutes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Name):
        """! Get item by key
        @param[in] Name """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class ActPairs:
    """! ActPairs Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByActivities(self, OrigActivity, DestActivity):
        """! Get item by activities
        @param[in] OrigActivity
        @param[in] DestActivity """
        pass
    
    def ItemByKey(self, ActPairCode):
        """! Get item by key
        @param[in] ActPairCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class FareZones:
    """! IFareZones Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, FareZoneNo):
        """! Get item by key
        @param[in] FareZoneNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class FlowBundle:
    """! IFlowBundle Interface """

    def __init__(self):
        """Contains all attributes"""
        self.ConditionDefined=ConditionDefined()
        self.DemandSegments=DemandSegments()
    def SetAlternativeRoutes(self, alternativeRoutes):
        """! Set Alternative Routes
        @param[in] alternativeRoutes """
        pass
    
    def CreateNewGroup(self):
        """! Create new Group """
        pass
    
    def CreateRouteTrafficTypeSet(self):
        """! Create route traffic type set """
        pass
    
    def CreateConditionActiveTimeProfiles(self, TTSet, Complement):
        """! Active TimeProfiles
        @param[in] TTSet
        @param[in] Complement """
        pass
    
    def CreateConditionActiveLinksWithRestrictedSupply(self, Supply, IncludeWalk, IncludePuTAux, TrafficTypeSet, Complement, UseActiveLinks, AnalysisLineAttribute, ConsiderTimeRestriction, FromTime, ToTime, IncludePrT):
        """! Create Condition for Active Links with Restricted Supply
        @param[in] Supply
        @param[in] IncludeWalk
        @param[in] IncludePuTAux
        @param[in] TrafficTypeSet
        @param[in] Complement
        @param[in] UseActiveLinks
        @param[in] AnalysisLineAttribute
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime
        @param[in] IncludePrT """
        pass
    
    def CreateCondition(self, NetElm, ActivityTypeSet, Complement, ConsiderTimeRestriction, FromTime, ToTime):
        """! Create Condition
        @param[in] NetElm
        @param[in] ActivityTypeSet
        @param[in] Complement
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime """
        pass
    
    def CreateConditionWithRestrictedSupply(self, NetElm, localSupply, localSupply_includeWalk, ActivityTypeSet, supplyAfterTransfer, afterTransfer_includeWalk, Complement, ConsiderTimeRestriction, FromTime, ToTime):
        """! Create Condition with Restricted Supply
        @param[in] NetElm
        @param[in] localSupply
        @param[in] localSupply_includeWalk
        @param[in] ActivityTypeSet
        @param[in] supplyAfterTransfer
        @param[in] afterTransfer_includeWalk
        @param[in] Complement
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime """
        pass
    
    def CreateConditionActiveStopsWithRestrictedSupply(self, Supply, TrafficTypeSet, Complement, UseActiveStops, AnalysisLineAttribute, ConsiderTimeRestriction, FromTime, ToTime):
        """! Create Condition for Active Stops with Restricted Supply
        @param[in] Supply
        @param[in] TrafficTypeSet
        @param[in] Complement
        @param[in] UseActiveStops
        @param[in] AnalysisLineAttribute
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime """
        pass
    
    def CreateConditionSelectedLinksWithRestrictedSupply(self, SelectedLinks, Supply, IncludeWalk, IncludePuTAux, TrafficTypeSet, Complement, AnalysisLineAttribute, ConsiderTimeRestriction, FromTime, ToTime, IncludePrT):
        """! Create Condition for Selected Links with Restricted Supply
        @param[in] SelectedLinks
        @param[in] Supply
        @param[in] IncludeWalk
        @param[in] IncludePuTAux
        @param[in] TrafficTypeSet
        @param[in] Complement
        @param[in] AnalysisLineAttribute
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime
        @param[in] IncludePrT """
        pass
    
    def CreateConditionActiveLines(self, TTSet, Complement):
        """! Active Lines
        @param[in] TTSet
        @param[in] Complement """
        pass
    
    def CreateConditionActiveVehJourneySections(self, TTSet, Complement):
        """! Active Vehicle Journey Sections
        @param[in] TTSet
        @param[in] Complement """
        pass
    
    def CreateConditionSelectedStopsWithRestrictedSupply(self, SelectedStops, Supply, TrafficTypeSet, Complement, AnalysisLineAttribute, ConsiderTimeRestriction, FromTime, ToTime):
        """! Create Condition for Selected Stops with Restricted Supply
        @param[in] SelectedStops
        @param[in] Supply
        @param[in] TrafficTypeSet
        @param[in] Complement
        @param[in] AnalysisLineAttribute
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime """
        pass
    
    def Clear(self):
        """! Initialize flow bundle """
        pass
    
    def Execute(self, NetElms):
        """! Calculate flow bundle
        @param[in] NetElms """
        pass
    
    def CreateConditionActiveLinks(self, TTSet, Complement, ConsiderTimeRestriction, FromTime, ToTime):
        """! Active Links
        @param[in] TTSet
        @param[in] Complement
        @param[in] ConsiderTimeRestriction
        @param[in] FromTime
        @param[in] ToTime """
        pass
    
    def ExecuteCurrentConditions(self):
        """! Calculate flow bundle """
        pass
    
    def CreateConditionActiveLineRoutes(self, TTSet, Complement):
        """! Active Line Routes
        @param[in] TTSet
        @param[in] Complement """
        pass
    
    def GetOrCreateFlowBundleMatrix(self, DemSeg):
        """! Access to flow bundle matrix
        @param[in] DemSeg """
        pass
    
    def CloseBracket(self):
        """! Close bracket """
        pass
    
    def SetCalculateForTimeIntervals(self, calculationsPerTI):
        """! Set calculate flow bundle for time intervals
        @param[in] calculationsPerTI """
        pass
    
    def OpenBracket(self, Complement):
        """! Open bracket
        @param[in] Complement """
        pass
    
    def CreateConditionActiveVehJourneys(self, TTSet, Complement):
        """! Active Vehicle Journeys
        @param[in] TTSet
        @param[in] Complement """
        pass
    
    def CreateActivityTypeSet(self):
        """! Create activity type set """
        pass
    
class Connectors:
    """! IODConnectors Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GroupGPA=GroupGPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def ExistsByKey(self, Node, Zone):
        """! Exists item by key
        @param[in] Node
        @param[in] Zone """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def DestItemByKey(self, fromNode, NachBezirk):
        """! Get dest. item by key
        @param[in] fromNode
        @param[in] NachBezirk """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def SourceItemByKey(self, VonBezirk, toNode):
        """! Get source item by key
        @param[in] VonBezirk
        @param[in] toNode """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class StopPoints:
    """! IStopPoints Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def ConvertIntoStopPointOnNode(self, OnlyActive):
        """! Convert stop point on link to stop point on node
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get item by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class LineRoutes:
    """! ILineRoutes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetLineRouteDisaggregationParameters=GetLineRouteDisaggregationParameters()
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetLineRouteAggregationParameters=GetLineRouteAggregationParameters()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def Disaggregate(self, LineRouteDisaggregationPara):
        """! Disaggregate line routes
        @param[in] LineRouteDisaggregationPara """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def RemoveZigZagRoutings(self, _MIDL__ILineRoutes0000_, OnlyTrivial, RepeatUntilAllAreRemoved):
        """! Remove zig zags on routes
        @param[in] _MIDL__ILineRoutes0000_
        @param[in] OnlyTrivial
        @param[in] RepeatUntilAllAreRemoved """
        pass
    
    def ItemByKey(self, Line, Direction, Name):
        """! Get item by key
        @param[in] Line
        @param[in] Direction
        @param[in] Name """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def Aggregate(self, LineRouteAggPara):
        """! Aggregate line routes
        @param[in] LineRouteAggPara """
        pass
    
    def ItemByID(self, ID):
        """! Get item by id
        @param[in] ID """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class LineRouteItemPuTDetails:
    """! ILineRouteItemPuTDetails Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.Count=Count()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def AttState(self, Attribute):
        """! Read attribute define state
        @param[in] Attribute """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def ItemByKey(self, Line, Direction, LineRoute, LineRouteItem, VehJourney, VehJourneySection):
        """! Get item by key
        @param[in] Line
        @param[in] Direction
        @param[in] LineRoute
        @param[in] LineRouteItem
        @param[in] VehJourney
        @param[in] VehJourneySection """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
class TicketTypes:
    """! ITicketTypes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, TicketTypeNo):
        """! Get item by key
        @param[in] TicketTypeNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Lines:
    """! ILines Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, LineName):
        """! Get item by key
        @param[in] LineName """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Tours:
    """! Tours Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Person, Schedule, TourNo):
        """! Get item by key
        @param[in] Person
        @param[in] Schedule
        @param[in] TourNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class VehicleUnits:
    """! IVehicleUnits Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, VehicleUnitNumber):
        """! Get item by key
        @param[in] VehicleUnitNumber """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class ActivityExecutions:
    """! ActivityExecutions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Person, Schedule, ActivityExecutionIndex):
        """! Get item by key
        @param[in] Person
        @param[in] Schedule
        @param[in] ActivityExecutionIndex """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class StoryboardActions:
    """! IStoryboardActions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TollMatrices:
    """! ITollMatrices Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, resTrafAreaNo, fromNode, toNode):
        """! Get item by key
        @param[in] resTrafAreaNo
        @param[in] fromNode
        @param[in] toNode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TimeProfiles:
    """! ITimeProfiles Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Line, Direction, LineRoute, Name):
        """! Get item by key
        @param[in] Line
        @param[in] Direction
        @param[in] LineRoute
        @param[in] Name """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def ItemByID(self, ID):
        """! Get item by id
        @param[in] ID """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class PropagationLinkInfos:
    """! IPropagationLinkInfos Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def RemoveAll4Zone(self, destZone):
        """! Remove propagationlinkinfo on zone
        @param[in] destZone """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, fromNode, toNode, destZone):
        """! Access to propagationlinkinfo
        @param[in] fromNode
        @param[in] toNode
        @param[in] destZone """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def PropagationLinkInfoExistsByKey(self, fromNode, toNode, destZone):
        """! Does propagationlinkinfo exist between link and zone?
        @param[in] fromNode
        @param[in] toNode
        @param[in] destZone """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Remove(self, fromNode, toNode, destZone):
        """! Remove propagationlinkinfo
        @param[in] fromNode
        @param[in] toNode
        @param[in] destZone """
        pass
    
    def RemoveAll4Link(self, fromNode, toNode):
        """! Remove propagationlinkinfo on link
        @param[in] fromNode
        @param[in] toNode """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TSystems:
    """! ITSystems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, TSystemChar):
        """! Access to transport system
        @param[in] TSystemChar """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Links:
    """! ILinks Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GroupGPA=GroupGPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def GetMultiAttValuesAtTime(self, AttID, DayIndex, DayTime, OnlyActive):
        """! Get all TimeVaryingAttributes at timepoint.
        @param[in] AttID
        @param[in] DayIndex
        @param[in] DayTime
        @param[in] OnlyActive """
        pass
    
    def SetDefaultsFromLinkType(self, OnlyActive, Attributes):
        """! Set default values from link type 
        @param[in] OnlyActive
        @param[in] Attributes """
        pass
    
    def ItemByLinkNrFromNode(self, linkNo, fromNode):
        """! Access via link number / from-node
        @param[in] linkNo
        @param[in] fromNode """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def CalculateSlope(self, OnlyActive, lengthReference):
        """! Calculate slope from Z-coordinates of adjacent nodes
        @param[in] OnlyActive
        @param[in] lengthReference """
        pass
    
    def LinkExistsByKey(self, fromNode, toNode):
        """! Does link exist between nodes?
        @param[in] fromNode
        @param[in] toNode """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def SplitAtIntersections(self, onlyWithCommonTSys, OnlyActive, attrName):
        """! Split links at intersections
        @param[in] onlyWithCommonTSys
        @param[in] OnlyActive
        @param[in] attrName """
        pass
    
    def ItemByKey(self, fromNode, toNode):
        """! Access to link
        @param[in] fromNode
        @param[in] toNode """
        pass
    
    def SplitViaNode(self, fromNode, toNode, viaNode):
        """! Split link via node
        @param[in] fromNode
        @param[in] toNode
        @param[in] viaNode """
        pass
    
    def ClearTimeVaryingAttValues(self, AttID):
        """! Clear all TimeVaryingAttributes with ID.
        @param[in] AttID """
        pass
    
    def SplitAtStopPointOnLink(self, OnlyActive):
        """! Split link at stop point on link 
        @param[in] OnlyActive """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def SplitAtPosition(self, fromNode, toNode, xPos, yPos):
        """! Split link at position
        @param[in] fromNode
        @param[in] toNode
        @param[in] xPos
        @param[in] yPos """
        pass
    
    def SplitAtPolygonPoints(self, nodeTypeNo, OnlyActive):
        """! Split links at polygon points 
        @param[in] nodeTypeNo
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def SplitAtSurfaces(self, SurfaceSet):
        """! Split links at surfaces
        @param[in] SurfaceSet """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def SetPuTTimesFromTimeProfiles(self, aggrType, onlyActiveLinks, onlyActiveTimeProfiles):
        """! Set PuT link times
        @param[in] aggrType
        @param[in] onlyActiveLinks
        @param[in] onlyActiveTimeProfiles """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def DeleteTimeVaryingAttribute(self, AttID):
        """! Delete TimeVaryingAttribute by ID.
        @param[in] AttID """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiTimeVaryingAttValues(self, AttID, OnlyActive):
        """! Get all TimeVaryingAttributes.
        @param[in] AttID
        @param[in] OnlyActive """
        pass
    
    def InterpolateZCoordinates(self, onlyActiveLinks):
        """! Interpolate polygon Z coordinates
        @param[in] onlyActiveLinks """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def GeneralizePolygons(self, MaxDistance, OnlyActive):
        """! Generalize polygons
        @param[in] MaxDistance
        @param[in] OnlyActive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Remove(self, fromNode, toNode):
        """! Remove link
        @param[in] fromNode
        @param[in] toNode """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddTimeVaryingAttribute(self, AttID):
        """! Add TimeVaryingAttribute with ID.
        @param[in] AttID """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class CalendarPeriod:
    """! ICalendarPeriod Interface """

    def __init__(self):
        """Contains all attributes"""
        self.NumTimeIntervals=NumTimeIntervals()
        self.Active=Active()
        self.CurrentTimeInterval=CurrentTimeInterval()
        self.AnalysisTimeIntervalSet=AnalysisTimeIntervalSet()
    def TimeInterval(self, AnalysisTimeIntervalCodeOrIndex1Based):
        """! Get analysis time interval
        @param[in] AnalysisTimeIntervalCodeOrIndex1Based """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class StopAreas:
    """! IStopAreas Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get item by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def CreateZonesFromStopAreas(self, Matrices, ZoneTypeNo, onlyActiveStopAreas):
        """! Create zones and demand matrices from stop areas
        @param[in] Matrices
        @param[in] ZoneTypeNo
        @param[in] onlyActiveStopAreas """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class DemandSegments:
    """! DemandSegments Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def GetMultiAttValuesAtTime(self, AttID, DayIndex, DayTime, OnlyActive):
        """! Get all TimeVaryingAttributes at timepoint.
        @param[in] AttID
        @param[in] DayIndex
        @param[in] DayTime
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DemandSegCode):
        """! Get item by key
        @param[in] DemandSegCode """
        pass
    
    def ClearTimeVaryingAttValues(self, AttID):
        """! Clear all TimeVaryingAttributes with ID.
        @param[in] AttID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def DeleteTimeVaryingAttribute(self, AttID):
        """! Delete TimeVaryingAttribute by ID.
        @param[in] AttID """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiTimeVaryingAttValues(self, AttID, OnlyActive):
        """! Get all TimeVaryingAttributes.
        @param[in] AttID
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddTimeVaryingAttribute(self, AttID):
        """! Add TimeVaryingAttribute with ID.
        @param[in] AttID """
        pass
    
class GraphicParameters:
    """! INetEditor2DGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Turns=Turns()
        self.MainZones=MainZones()
        self.Isochrones=Isochrones()
        self.RouteCourses=RouteCourses()
        self.Detectors=Detectors()
        self.Links=Links()
        self.TransferRelations=TransferRelations()
        self.StopAreas=StopAreas()
        self.Locations=Locations()
        self.BaseMap=BaseMap()
        self.CountLocations=CountLocations()
        self.Stops=Stops()
        self.POIs=POIs()
        self.Zones=Zones()
        self.DesireLinesMainZones=DesireLinesMainZones()
        self.Territories=Territories()
        self.PathSequenceItem=PathSequenceItem()
        self.DesireLinesZones=DesireLinesZones()
        self.RestrictedTrafficAreas=RestrictedTrafficAreas()
        self.MainNodes=MainNodes()
        self.StopCatchmentAreas=StopCatchmentAreas()
        self.GISObjects=GISObjects()
        self.Connectors=Connectors()
        self.GraphicTools=GraphicTools()
        self.SharingStations=SharingStations()
        self.Screenlines=Screenlines()
        self.StopPoints=StopPoints()
        self.Nodes=Nodes()
        self.LayerParameters=LayerParameters()
        self.LaneAllocation=LaneAllocation()
        self.Base=Base()
        self.Tours=Tours()
    def Open(self, FileName, overreadNetDependentGPars):
        """! Open binary file
        @param[in] FileName
        @param[in] overreadNetDependentGPars """
        pass
    
    def Save(self, FileName):
        """! Save binary file
        @param[in] FileName """
        pass
    
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName, omitInactiveLayers, omitUnusedData):
        """! Save XML file
        @param[in] FileName
        @param[in] omitInactiveLayers
        @param[in] omitUnusedData """
        pass
    
class Locations:
    """! Locations Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, LocationNo):
        """! Get item by key
        @param[in] LocationNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Persons:
    """! Persons Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, PersonNo):
        """! Get item by key
        @param[in] PersonNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def RemoveAllLongTermChoices(self):
        """! Remove all long term choices """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TimeProfileItems:
    """! ITimeProfileItems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, TimeProfile, Index):
        """! Access via time profile and time profile item index
        @param[in] TimeProfile
        @param[in] Index """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Crosswalks:
    """! ICrosswalks Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def ItemByLeg(self, Leg, Index, Direction):
        """! Get item by leg
        @param[in] Leg
        @param[in] Index
        @param[in] Direction """
        pass
    
    def ItemByLink(self, Node, MainNode, Link, Index, Direction):
        """! Get item by link
        @param[in] Node
        @param[in] MainNode
        @param[in] Link
        @param[in] Index
        @param[in] Direction """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Node, MainNode, Orientation, Index, Direction):
        """! Get item by key
        @param[in] Node
        @param[in] MainNode
        @param[in] Orientation
        @param[in] Index
        @param[in] Direction """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Matrices:
    """! Matrices Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def ItemsByRef(self, MatrixRef):
        """! Get items by matrix reference string
        @param[in] MatrixRef """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, MatrixNo):
        """! Get item by key
        @param[in] MatrixNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class CountLocations:
    """! ICountLocations Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, countLocNo):
        """! Access via census point No.
        @param[in] countLocNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class DeliveryConcepts:
    """! IDeliveryConcepts Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DeliveryConceptCode):
        """! Get item by key
        @param[in] DeliveryConceptCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Households:
    """! Households Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, HouseholdNo):
        """! Get item by key
        @param[in] HouseholdNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Zones:
    """! IZones Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AggregateSurfacesByAttribute(self, AttID, useAttributValueForSurfaceNumber, OnlyActive):
        """! Aggregate by attribute
        @param[in] AttID
        @param[in] useAttributValueForSurfaceNumber
        @param[in] OnlyActive """
        pass
    
    def ConvertInto(self, TargetNetObjName, targetCategory, SourceForKeyAttID, DoNothingInCaseOfConflict, AllocateObjectsWithinPolygon, OnlyActive):
        """! Convert surfaces
        @param[in] TargetNetObjName
        @param[in] targetCategory
        @param[in] SourceForKeyAttID
        @param[in] DoNothingInCaseOfConflict
        @param[in] AllocateObjectsWithinPolygon
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, ZoneNo):
        """! Get item by key
        @param[in] ZoneNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AggregateSurfaces(self, OnlyActive):
        """! Aggregate
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def NormalizeSurfaces(self, OnlyActive):
        """! Normalize surfaces
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class VehicleCombinations:
    """! IVehicleCombinations Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, VehicleCombNumber):
        """! Get item by key
        @param[in] VehicleCombNumber """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class LinkTypes:
    """! ILinkTypes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, StrTypNr):
        """! Access to link type
        @param[in] StrTypNr """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Territories:
    """! ITerritories Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AggregateSurfacesByAttribute(self, AttID, useAttributValueForSurfaceNumber, OnlyActive):
        """! Aggregate by attribute
        @param[in] AttID
        @param[in] useAttributValueForSurfaceNumber
        @param[in] OnlyActive """
        pass
    
    def ConvertInto(self, TargetNetObjName, targetCategory, SourceForKeyAttID, DoNothingInCaseOfConflict, AllocateObjectsWithinPolygon, OnlyActive):
        """! Convert surfaces
        @param[in] TargetNetObjName
        @param[in] targetCategory
        @param[in] SourceForKeyAttID
        @param[in] DoNothingInCaseOfConflict
        @param[in] AllocateObjectsWithinPolygon
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, number):
        """! Get item by key
        @param[in] number """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AggregateSurfaces(self, OnlyActive):
        """! Aggregate
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def NormalizeSurfaces(self, OnlyActive):
        """! Normalize surfaces
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Stages:
    """! IStages Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, SignalControl, StageNo):
        """! Get item by key
        @param[in] SignalControl
        @param[in] StageNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class LegendParameters:
    """! ILegendParameters Interface """

    def __init__(self):
        """Contains all attributes"""
        self.LegendGeneralParameters=LegendGeneralParameters()
        self.LegendElementsParameters=LegendElementsParameters()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class POICategories:
    """! IPOICategories Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def FindFirstWithCode(self, CategoryCode):
        """! Find first item with code
        @param[in] CategoryCode """
        pass
    
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, CategoryNo):
        """! Get item by key
        @param[in] CategoryNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class SystemRouteItems:
    """! ISystemRouteItems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def RemoveFirstZigZagRouting(self):
        """! Remove the first zig zag routing """
        pass
    
    def ItemByKey(self, SysRouteName, Index):
        """! Access via system route and system route item index
        @param[in] SysRouteName
        @param[in] Index """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class GISCategories:
    """! IGISCategories Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def FindFirstWithCode(self, CategoryCode):
        """! Find first item with code
        @param[in] CategoryCode """
        pass
    
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, CategoryNo):
        """! Get item by key
        @param[in] CategoryNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class ChainedUpVehicleJourneySections:
    """! IChainedUpVehicleJourneySections Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class MainLines:
    """! IMainLines Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Name):
        """! Get item by key
        @param[in] Name """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class MainNodes:
    """! IMainNodes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def GetMultiAttValuesAtTime(self, AttID, DayIndex, DayTime, OnlyActive):
        """! Get all TimeVaryingAttributes at timepoint.
        @param[in] AttID
        @param[in] DayIndex
        @param[in] DayTime
        @param[in] OnlyActive """
        pass
    
    def ConvertInto(self, TargetNetObjName, targetCategory, SourceForKeyAttID, DoNothingInCaseOfConflict, AllocateObjectsWithinPolygon, OnlyActive):
        """! Convert surfaces
        @param[in] TargetNetObjName
        @param[in] targetCategory
        @param[in] SourceForKeyAttID
        @param[in] DoNothingInCaseOfConflict
        @param[in] AllocateObjectsWithinPolygon
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, number):
        """! Get item by key
        @param[in] number """
        pass
    
    def ClearTimeVaryingAttValues(self, AttID):
        """! Clear all TimeVaryingAttributes with ID.
        @param[in] AttID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def DeleteTimeVaryingAttribute(self, AttID):
        """! Delete TimeVaryingAttribute by ID.
        @param[in] AttID """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiTimeVaryingAttValues(self, AttID, OnlyActive):
        """! Get all TimeVaryingAttributes.
        @param[in] AttID
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def NormalizeSurfaces(self, OnlyActive):
        """! Normalize surfaces
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddTimeVaryingAttribute(self, AttID):
        """! Add TimeVaryingAttribute with ID.
        @param[in] AttID """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class BlockItemTypes:
    """! IBlockItemTypes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get item by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TerritoryPuTDetails:
    """! ITerritoryPuTDetails Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.Count=Count()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def AttState(self, Attribute):
        """! Read attribute define state
        @param[in] Attribute """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut):
        """! Read all attribute values
        @param[in] Attribut """
        pass
    
class TimeSeriesCont:
    """! TimeSeriesCont Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, TimeSeriesNo):
        """! Get item by key
        @param[in] TimeSeriesNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Blocks:
    """! IBlocks Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Access via block No.
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Activities:
    """! Activities Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, ActivityCode):
        """! Get item by key
        @param[in] ActivityCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class StopPointPuTDetails:
    """! IStopPointPuTDetails Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.Count=Count()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def AttState(self, Attribute):
        """! Read attribute define state
        @param[in] Attribute """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut):
        """! Read all attribute values
        @param[in] Attribut """
        pass
    
class Marking:
    """! IMarking Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Count=Count()
        self.Changed=Changed()
        self.IncludePOISubCategories=IncludePOISubCategories()
        self.ObjectType=ObjectType()
        self.GetAll=GetAll()
        self.RestrictToPOICategory=RestrictToPOICategory()
    def Clear(self):
        """! Initialize marking """
        pass
    
    def Add(self, Elements):
        """! Add elements
        @param[in] Elements """
        pass
    
class TerritoryPuTDetailVehJourneyItems:
    """! ITerritoryPuTDetailVehJourneyItems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.Count=Count()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def AttState(self, Attribute):
        """! Read attribute define state
        @param[in] Attribute """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut):
        """! Read all attribute values
        @param[in] Attribut """
        pass
    
class Schedules:
    """! Schedules Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def SortEachSchedule(self):
        """! Sort trips and activity executions in each schedule """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Person, ScheduleNo):
        """! Get item by key
        @param[in] Person
        @param[in] ScheduleNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class UserDefinedGroups:
    """! IUserDefinedGroups Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Name):
        """! Get item by key
        @param[in] Name """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self):
        """! Remove all objects """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class SharingStations:
    """! ISharingStations Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, SharingStationNo):
        """! Get item by key
        @param[in] SharingStationNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class PlannedConnectingJourneys:
    """! IPlannedConnectingJourneys Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, FromVehJourney, FromIndex, ToVehJourney, ToIndex):
        """! Get item by key
        @param[in] FromVehJourney
        @param[in] FromIndex
        @param[in] ToVehJourney
        @param[in] ToIndex """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class TripRequests:
    """! ITripRequests Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get item by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Screenlines:
    """! IScreenlines Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GroupGPA=GroupGPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, ScreenlineNo):
        """! Access via Screenline No.
        @param[in] ScreenlineNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class ODPairs:
    """! IODPairs Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GroupGPA=GroupGPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, fromZone, toZone):
        """! Get item by key
        @param[in] fromZone
        @param[in] toZone """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Trips:
    """! Trips Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, Person, Schedule, Tour, TripIndex):
        """! Get item by key
        @param[in] Person
        @param[in] Schedule
        @param[in] Tour
        @param[in] TripIndex """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class DemandStrata:
    """! DemandStrata Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def ItemByGroupAndActChain(self, PersonGroup, ActChain):
        """! Get item by group and activity chain
        @param[in] PersonGroup
        @param[in] ActChain """
        pass
    
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DemandStratumCode):
        """! Get item by key
        @param[in] DemandStratumCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def ItemByGroupAndActPair(self, PersonGroupCodes, ActPAir):
        """! Get item by group and activity pair
        @param[in] PersonGroupCodes
        @param[in] ActPAir """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class DemandModels:
    """! DemandModels Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DemandModelCode):
        """! Get item by key
        @param[in] DemandModelCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class CameraPositions:
    """! ICameraPositions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, no):
        """! Get camera position by key
        @param[in] no """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class VehicleJourneyItems:
    """! IVehicleJourneyItems Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, VehJourney, Index):
        """! Access via vehicle journey and vehicle journey item index
        @param[in] VehJourney
        @param[in] Index """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Nodes:
    """! INodes Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GPA=GPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def GetMultiAttValuesAtTime(self, AttID, DayIndex, DayTime, OnlyActive):
        """! Get all TimeVaryingAttributes at timepoint.
        @param[in] AttID
        @param[in] DayIndex
        @param[in] DayTime
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def RemoveNodes(self, Parameters):
        """! Remove nodes
        @param[in] Parameters """
        pass
    
    def ItemByKey(self, NodeNo):
        """! Get item by key
        @param[in] NodeNo """
        pass
    
    def ClearTimeVaryingAttValues(self, AttID):
        """! Clear all TimeVaryingAttributes with ID.
        @param[in] AttID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def CreateAutomaticNodeConnectionParas(self):
        """! Create new AutomaticNodeConnectionParas object """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def DeleteTimeVaryingAttribute(self, AttID):
        """! Delete TimeVaryingAttribute by ID.
        @param[in] AttID """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiTimeVaryingAttValues(self, AttID, OnlyActive):
        """! Get all TimeVaryingAttributes.
        @param[in] AttID
        @param[in] OnlyActive """
        pass
    
    def ConnectNodes(self, sourceNodes, paras):
        """! Connect nodes by links.
        @param[in] sourceNodes
        @param[in] paras """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def NodeExistsByKey(self, NodeNo):
        """! Does Node exist?
        @param[in] NodeNo """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddTimeVaryingAttribute(self, AttID):
        """! Add TimeVaryingAttribute with ID.
        @param[in] AttID """
        pass
    
    def Merge(self, destinationNode, dyingNode):
        """! Merge nodes
        @param[in] destinationNode
        @param[in] dyingNode """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class PathSets:
    """! IPathSets Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, PathSetNo):
        """! Get item by key
        @param[in] PathSetNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class GeometryTemplates:
    """! IGeometryTemplates Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, GeometryTemplateNo):
        """! Get item by key
        @param[in] GeometryTemplateNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class Directions:
    """! IDirections Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, DirectionCode):
        """! Get item by key
        @param[in] DirectionCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class PrintParameters:
    """! IPrintParameters Interface """

    def __init__(self):
        """Contains all attributes"""
        self.PrintFrame=PrintFrame()
        self.PrintArea=PrintArea()
        self.Contents=Contents()
        self.PageSetup=PageSetup()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class MainODPairs:
    """! IMainODPairs Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GroupGPA=GroupGPA()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
        self.Count=Count()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, fromMainZone, toMainZone):
        """! Get item by key
        @param[in] fromMainZone
        @param[in] toMainZone """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class PersonGroups:
    """! PersonGroups Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, PersonGroupCode):
        """! Get item by key
        @param[in] PersonGroupCode """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class Operators:
    """! IOperators Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, OperatorNumber):
        """! Get item by key
        @param[in] OperatorNumber """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def Renumber(self, startNo, increment, OnlyActive):
        """! Renumber objects
        @param[in] startNo
        @param[in] increment
        @param[in] OnlyActive """
        pass
    
class MainTurns:
    """! IMainTurns Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def GetMultiAttValuesAtTime(self, AttID, DayIndex, DayTime, OnlyActive):
        """! Get all TimeVaryingAttributes at timepoint.
        @param[in] AttID
        @param[in] DayIndex
        @param[in] DayTime
        @param[in] OnlyActive """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def SetDefaultsFromGeometryAndTurnStandard(self, OnlyActive, Attributes, useShortestPathCalculation, useSumOfTurnStandardAndShortestPathCalculationForT0):
        """! Set default values from geometry and turn standard
        @param[in] OnlyActive
        @param[in] Attributes
        @param[in] useShortestPathCalculation
        @param[in] useSumOfTurnStandardAndShortestPathCalculationForT0 """
        pass
    
    def ItemByKey(self, fromNode, fromCordonNode, toCordonNode, toNode):
        """! Get item by key
        @param[in] fromNode
        @param[in] fromCordonNode
        @param[in] toCordonNode
        @param[in] toNode """
        pass
    
    def ClearTimeVaryingAttValues(self, AttID):
        """! Clear all TimeVaryingAttributes with ID.
        @param[in] AttID """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def DeleteTimeVaryingAttribute(self, AttID):
        """! Delete TimeVaryingAttribute by ID.
        @param[in] AttID """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def GetMultiTimeVaryingAttValues(self, AttID, OnlyActive):
        """! Get all TimeVaryingAttributes.
        @param[in] AttID
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def MainTurnExistsByKey(self, fromNode, fromCordonNode, toCordonNode, toNode):
        """! Does mainturn exist?
        @param[in] fromNode
        @param[in] fromCordonNode
        @param[in] toCordonNode
        @param[in] toNode """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddTimeVaryingAttribute(self, AttID):
        """! Add TimeVaryingAttribute with ID.
        @param[in] AttID """
        pass
    
class Paths:
    """! IPaths Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.Attributes=Attributes()
        self.GetMultiFilterState=GetMultiFilterState()
        self.GetAllActive=GetAllActive()
        self.Count=Count()
        self.CountActive=CountActive()
        self.GetAll=GetAll()
    def SetMultiAttValues(self, Attribut, newValues, Add):
        """! Set values for all objects
        @param[in] Attribut
        @param[in] newValues
        @param[in] Add """
        pass
    
    def AttrExists(self, Attribute):
        """! Is the specified string an existing attribute (subattributes are optional)
        @param[in] Attribute """
        pass
    
    def SetActive(self):
        """! Set all objects active """
        pass
    
    def ItemByKey(self, PathSet, PathNo):
        """! Get item by key
        @param[in] PathSet
        @param[in] PathNo """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def AttState(self, Attribute):
        """! Get attribute define state
        @param[in] Attribute """
        pass
    
    def GetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Get values of multiple numeric attributes into C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
    def AddUserDefinedAttribute(self, ID, shortName, longName, vt, decplaces, ignored, minval, maxval, defval, crossSectionLogic, cslIgnoreClosed, formula, subAttr, canBeEmpty):
        """! Add user-defined attribute
        @param[in] ID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] decplaces
        @param[in] ignored
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] crossSectionLogic
        @param[in] cslIgnoreClosed
        @param[in] formula
        @param[in] subAttr
        @param[in] canBeEmpty """
        pass
    
    def FilteredBy(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied dynamically when calling methods on the returned collection.
        @param[in] formula """
        pass
    
    def GetMultiByFormula(self, formula, OnlyActive):
        """! Get result of formula evaluated on all (active) objects
        @param[in] formula
        @param[in] OnlyActive """
        pass
    
    def GetFilteredSet(self, formula):
        """! Get collection of all objects for which the given formula returns true. The filtering is applied instantly and the returned collection will contain a fixed set of objects.
        @param[in] formula """
        pass
    
    def SetRunTimes(self, TSysCode, DepartureTime, DepartureDay, ReferenceType, AddAllProfilePoints, OnlyActive):
        """! Set Runtimes for Paths
        @param[in] TSysCode
        @param[in] DepartureTime
        @param[in] DepartureDay
        @param[in] ReferenceType
        @param[in] AddAllProfilePoints
        @param[in] OnlyActive """
        pass
    
    def SetMultipleAttributes(self, AttrIDs, value, OnlyActive):
        """! Set values to multiple attributes
        @param[in] AttrIDs
        @param[in] value
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def SetPassive(self):
        """! Set all objects passive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
    def Invert(self):
        """! Invert all objects """
        pass
    
    def SetAllAttValues(self, Attribut, newValue, OnlyActive, Add):
        """! Set one value for all objects
        @param[in] Attribut
        @param[in] newValue
        @param[in] OnlyActive
        @param[in] Add """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def DeleteUserDefinedAttribute(self, ID):
        """! Delete user-defined attribute
        @param[in] ID """
        pass
    
    def SetMultipleAttributesRaw(self, AttrIDs, hi, lo, RawArrayTypeInfo, OnlyActive):
        """! Set values of multiple numeric attributes from C-style 2D array (shape: #objects, #attributes) of given type
        @param[in] AttrIDs
        @param[in] hi
        @param[in] lo
        @param[in] RawArrayTypeInfo
        @param[in] OnlyActive """
        pass
    
class LineSelectionAndStopSequenceTool:
    """! ILineSelectionAndStopSequenceTool Interface """

    def __init__(self):
        """Contains all attributes"""
        self.DefaultLineSelectionAndStopSequence=DefaultLineSelectionAndStopSequence()
    def OpenLayout(self, FileName):
        """! Open line selection and stop sequence layout file
        @param[in] FileName """
        pass
    
    def SaveLayout(self, FileName):
        """! Save line selection and stop sequence layout file
        @param[in] FileName """
        pass
    
class BlockSelectionTool:
    """! IBlockSelectionTool Interface """

    def __init__(self):
        """Contains all attributes"""
        self.DefaultBlockSelection=DefaultBlockSelection()
    def OpenLayout(self, FileName):
        """! Open Layout
        @param[in] FileName """
        pass
    
    def SaveLayout(self, FileName):
        """! Save Layout
        @param[in] FileName """
        pass
    
class CreateBlockDisplay:
    """! IBlockDisplay Interface """

    def __init__(self):
        """Contains all attributes"""
        self.BlockSelection=BlockSelection()
    def OpenGraphicparameters(self, FileName):
        """! Open Graphicparameters
        @param[in] FileName """
        pass
    
    def SaveGraphicparameters(self, FileName):
        """! Save Graphicparameters
        @param[in] FileName """
        pass
    
    def Hide(self):
        """! Hide block display view """
        pass
    
    def SaveLayout(self, FileName):
        """! Save Layout
        @param[in] FileName """
        pass
    
    def ExportImageFile(self, FileName, servicesView, dotsPerInch):
        """! Export image file (Screenshot)
        @param[in] FileName
        @param[in] servicesView
        @param[in] dotsPerInch """
        pass
    
    def ExportSVG(self, FileName, servicesView):
        """! Export SVG
        @param[in] FileName
        @param[in] servicesView """
        pass
    
    def Show(self, docked):
        """! Show block display view
        @param[in] docked """
        pass
    
    def OpenLayout(self, FileName):
        """! Open Layout
        @param[in] FileName """
        pass
    
    def DisplayEntireContent(self):
        """! Display entire content """
        pass
    
class CreateNetEditor3D:
    """! INetEditor3D Interface """

    def __init__(self):
        """Contains all attributes"""
        self.SynchroMode=SynchroMode()
    def ApplyCameraPosition(self, cameraPosition):
        """! Apply a predefined camera position
        @param[in] cameraPosition """
        pass
    
    def OpenGraphicparameters(self, FileName):
        """! Open Graphicparameters
        @param[in] FileName """
        pass
    
    def SaveGraphicparameters(self, FileName):
        """! Save Graphicparameters
        @param[in] FileName """
        pass
    
    def Hide(self):
        """! Hide network editor 3D view """
        pass
    
    def RecordStoryboard(self):
        """! Record the current storyboard """
        pass
    
    def ExportImageFile(self, FileName):
        """! Export current view as image file (Screenshot)
        @param[in] FileName """
        pass
    
    def Show(self, docked):
        """! Show network editor 3D view
        @param[in] docked """
        pass
    
    def PlayStoryboard(self):
        """! Start playing the current storyboard """
        pass
    
    def PauseStoryboard(self):
        """! Pause playing the current storyboard """
        pass
    
    def WaitForStoryboard(self):
        """! If a storyboard is playing, wait it to finish """
        pass
    
    def ExportNetworkImageFile(self, FileName, resolutionX, resolutionY, dotsPerInch):
        """! Export current view as image file of given size
        @param[in] FileName
        @param[in] resolutionX
        @param[in] resolutionY
        @param[in] dotsPerInch """
        pass
    
    def StopStoryboard(self):
        """! Stop playing the current storyboard """
        pass
    
    def ApplyStoryboard(self, storyBoard, play):
        """! Apply a predefined storyboard
        @param[in] storyBoard
        @param[in] play """
        pass
    
    def DisplayEntireContent(self):
        """! Display entire content """
        pass
    
class CreateGraphicalTimetable:
    """! IGraphicalTimetable Interface """

    def __init__(self):
        """Contains all attributes"""
        self.LineSelectionAndStopSequence=LineSelectionAndStopSequence()
        self.LegendParameters=LegendParameters()
        self.SynchroMode=SynchroMode()
        self.ShowOnlyActiveVehJourneys=ShowOnlyActiveVehJourneys()
    def OpenGraphicparameters(self, FileName):
        """! Open Graphicparameters
        @param[in] FileName """
        pass
    
    def SaveGraphicparameters(self, FileName):
        """! Save Graphicparameters
        @param[in] FileName """
        pass
    
    def Hide(self):
        """! Hide graphical timetable view """
        pass
    
    def SaveLayout(self, FileName):
        """! Save Layout
        @param[in] FileName """
        pass
    
    def ExportImageFile(self, FileName, dotsPerInch):
        """! Export image file (Screenshot)
        @param[in] FileName
        @param[in] dotsPerInch """
        pass
    
    def ExportSVG(self, FileName):
        """! Export SVG
        @param[in] FileName """
        pass
    
    def Show(self, docked):
        """! Show graphical timetable view
        @param[in] docked """
        pass
    
    def DisplayTimeInterval24h(self, fromHour, toHour):
        """! Show time interval (24h display)
        @param[in] fromHour
        @param[in] toHour """
        pass
    
    def FitStopsToScreen(self):
        """! Scale stop texts into current window width """
        pass
    
    def OpenLayout(self, FileName):
        """! Open Layout
        @param[in] FileName """
        pass
    
    def DistributeStopTextsNonOverlapping(self):
        """! Rearrange stop texts in a way they do not overlap anymore """
        pass
    
    def SetStartTime24h(self, StartTime):
        """! Select start time for 24h display
        @param[in] StartTime """
        pass
    
    def DistributeStopDistsProportional(self):
        """! Distribute distances between stop texts proportional to net distances """
        pass
    
    def SetDurationOfDisplayTimeInterval(self, hours):
        """! Select duration of display time interval (open display)
        @param[in] hours """
        pass
    
    def DisplayEntireContent(self):
        """! Display entire content """
        pass
    
class CreateTabularTimetable:
    """! ITabularTimetable Interface """

    def __init__(self):
        """Contains all attributes"""
        self.LineSelectionAndStopSequence=LineSelectionAndStopSequence()
        self.SynchroMode=SynchroMode()
        self.ShowOnlyActiveVehJourneys=ShowOnlyActiveVehJourneys()
        self.ShowOnlyRelevantVehJourneys=ShowOnlyRelevantVehJourneys()
        self.ShowVehicleJourneySectionCourse=ShowVehicleJourneySectionCourse()
    def SaveGraphicparameters(self, FileName):
        """! Save Graphicparameters
        @param[in] FileName """
        pass
    
    def SaveVehJourneySectionGridToSafeArray(self, asFormattedStrings):
        """! Save vehicle journey section grid to safe array
        @param[in] asFormattedStrings """
        pass
    
    def VehJourneyGridClearColumns(self):
        """! Remove all attributes from vehicle journey grid """
        pass
    
    def VehJourneyItemGridStopSequenceClearColumns(self):
        """! Remove all attributes from stop sequence rows within vehicle journey item grid """
        pass
    
    def VehJourneySectionGridAddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! Append an attribute to the vehicle journey section grid's attribute selection
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def VehJourneyItemGridArrivalClearColumns(self):
        """! Remove all attributes from arrival rows within vehicle journey item grid """
        pass
    
    def OpenGraphicparameters(self, FileName):
        """! Open Graphicparameters
        @param[in] FileName """
        pass
    
    def Hide(self):
        """! Hide tabular timetable view """
        pass
    
    def SaveLayout(self, FileName):
        """! Save Layout
        @param[in] FileName """
        pass
    
    def OpenLayout(self, FileName):
        """! Open Layout
        @param[in] FileName """
        pass
    
    def VehJourneyGridAddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! Append an attribute to the vehicle journey grid's attribute selection
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def SaveVehJourneyItemGridToSafeArray(self, asFormattedStrings):
        """! Save vehicle journey item grid to safe array
        @param[in] asFormattedStrings """
        pass
    
    def SaveVehJourneyGridToSafeArray(self, asFormattedStrings):
        """! Save vehicle journey grid to safe array
        @param[in] asFormattedStrings """
        pass
    
    def SortByDepartureAtStopSequenceItem(self, stopSequenceItem):
        """! Sort columns by departure time at an element of current stop sequence
        @param[in] stopSequenceItem """
        pass
    
    def SortByAttribute(self, AttID):
        """! Sort columns by value of an attribute contained in vehicle journey grid
        @param[in] AttID """
        pass
    
    def VehJourneyItemGridDepartureClearColumns(self):
        """! Remove all attributes from departure rows within vehicle journey item grid """
        pass
    
    def VehJourneyItemGridArrivalAddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! Append an attribute to the vehicle journey item arrival row's attribute selection
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def Show(self, docked):
        """! Show tabular timetable view
        @param[in] docked """
        pass
    
    def VehJourneyItemGridDepartureAddColumn(self, Attribut, Format, decplaces, DisplayUnits, GroupOrAggrFunction, WeightedAvgAttribute):
        """! Append an attribute to the vehicle journey item departure row's attribute selection
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits
        @param[in] GroupOrAggrFunction
        @param[in] WeightedAvgAttribute """
        pass
    
    def VehJourneySectionGridClearColumns(self):
        """! Remove all attributes from vehicle journey section grid """
        pass
    
    def VehJourneyItemGridStopSequenceAddColumn(self, Attribut, Format, decplaces, DisplayUnits):
        """! Append an attribute to the vehicle journey item stop sequence row's attribute selection
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits """
        pass
    
    def SortByDepartureAtCommonStops(self):
        """! Sort columns by departure time at common stops """
        pass
    
class Backgrounds:
    """! IBackgrounds Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetAll=GetAll()
    def ItemByKey(self, FileName):
        """! Get item by key
        @param[in] FileName """
        pass
    
class NodeFlows:
    """! INodeFlows Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def Deactivate(self, Node):
        """! Deactivate single node flow
        @param[in] Node """
        pass
    
    def Autozoom(self):
        """! Autozoom """
        pass
    
    def SetRadius(self, Node, Radius):
        """! Set Radius for node flow
        @param[in] Node
        @param[in] Radius """
        pass
    
    def Clear(self):
        """! Initialize node flows """
        pass
    
    def Activate(self, Node):
        """! Activate single node flow
        @param[in] Node """
        pass
    
class RouteSearchPuT:
    """! IRouteSearchPuT Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def Autozoom(self):
        """! Route Search Autozoom """
        pass
    
    def Clear(self):
        """! Initialize Route Search """
        pass
    
    def Execute(self, NetElms, ModeCode, searchTime, searchDayInd, isArrivalTime, IndexAttribute, extension, RouteSearchPuTPara):
        """! Execute Route Search
        @param[in] NetElms
        @param[in] ModeCode
        @param[in] searchTime
        @param[in] searchDayInd
        @param[in] isArrivalTime
        @param[in] IndexAttribute
        @param[in] extension
        @param[in] RouteSearchPuTPara """
        pass
    
    def CreateRouteSearchPuTParameters(self):
        """! Create Parameter object for PuT route search """
        pass
    
class RouteSearchPuTSys:
    """! IRouteSearchPuTSys Interface """

    def __init__(self):
        """Contains all attributes"""
        self.NodeChainPuT=NodeChainPuT()
    def Autozoom(self):
        """! Route Search Autozoom """
        pass
    
    def Clear(self):
        """! Initialize Route Search """
        pass
    
    def Execute(self, NetElms, ModeCode, IndexAttribute):
        """! Execute Route Search
        @param[in] NetElms
        @param[in] ModeCode
        @param[in] IndexAttribute """
        pass
    
    def AttValue(self, Attribut):
        """! Read attribute value
        @param[in] Attribut """
        pass
    
class Isochrones:
    """! IIsochrones Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def ExecutePuTWithParameterObjects(self, NetElms, BaseParameters, RequestParameters):
        """! Execute for PuT
        @param[in] NetElms
        @param[in] BaseParameters
        @param[in] RequestParameters """
        pass
    
    def ExecutePuT(self, NetElms, ModeCode, fromTimeStr, toTimeStr, fromDayInd, toDayInd, extension, isArrivalTime):
        """! Execute for PuT
        @param[in] NetElms
        @param[in] ModeCode
        @param[in] fromTimeStr
        @param[in] toTimeStr
        @param[in] fromDayInd
        @param[in] toDayInd
        @param[in] extension
        @param[in] isArrivalTime """
        pass
    
    def ExecutePrT(self, NetElms, TSysCode, WKriterium, maxval, IsDestinationBased):
        """! Execute for PrT
        @param[in] NetElms
        @param[in] TSysCode
        @param[in] WKriterium
        @param[in] maxval
        @param[in] IsDestinationBased """
        pass
    
    def CreatePuTIsochroneRequestParameters(self):
        """! Create PuT isochrone request parameters """
        pass
    
    def Clear(self):
        """! Clear """
        pass
    
    def CreatePuTIsochroneBaseParameters(self):
        """! Create PuT isochrone base parameters """
        pass
    
class RouteSearchPrT:
    """! IRouteSearchPrT Interface """

    def __init__(self):
        """Contains all attributes"""
        self.NodeChainPrT=NodeChainPrT()
    def Autozoom(self):
        """! Route Search Autozoom """
        pass
    
    def Clear(self):
        """! Initialize Route Search """
        pass
    
    def Execute(self, NetElms, TSysCode, searchCriterion, IndexAttribute, searchTime, searchDayInd):
        """! Execute Route Search
        @param[in] NetElms
        @param[in] TSysCode
        @param[in] searchCriterion
        @param[in] IndexAttribute
        @param[in] searchTime
        @param[in] searchDayInd """
        pass
    
    def AttValue(self, Attribut):
        """! Read attribute value
        @param[in] Attribut """
        pass
    
class OperationExecutor:
    """! IOperationExecutor Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def IsExecuting(self):
        """! Get IsExecuting """
        pass
    
    def SetCurrentOperation(self, Operation):
        """! Set current operation
        @param[in] Operation """
        pass
    
    def AddColumn(self, Attribut, Format, decplaces, DisplayUnits):
        """! AddColumn
        @param[in] Attribut
        @param[in] Format
        @param[in] decplaces
        @param[in] DisplayUnits """
        pass
    
    def Reset(self):
        """! Reset """
        pass
    
    def GetCurrentOperation(self):
        """! Get current operation """
        pass
    
    def SaveLayout(self, FileName):
        """! SaveLayout
        @param[in] FileName """
        pass
    
    def Show(self):
        """! Show Procedure Sequence View """
        pass
    
    def ProcedureFlowFinished(self):
        """! Get IsProcedureFlowFinished """
        pass
    
    def OpenLayout(self, FileName):
        """! OpenLayout
        @param[in] FileName """
        pass
    
    def Execute(self):
        """! Execute """
        pass
    
    def ExecuteCurrentOperation(self):
        """! Execute current operation """
        pass
    
    def ClearLayout(self):
        """! ClearLayout """
        pass
    
class Operations:
    """! IOperations Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.GetAll=GetAll()
    def GetParent(self, Operation):
        """! Get parent group of given operation
        @param[in] Operation """
        pass
    
    def GetChildren(self, group):
        """! Get all children of group
        @param[in] group """
        pass
    
    def ItemByKey(self, procNo):
        """! Get item by key
        @param[in] procNo """
        pass
    
    def GetRelPos(self, Operation):
        """! Get relative position inside parent group
        @param[in] Operation """
        pass
    
    def AddOperation(self, RelPos, group):
        """! AddOperation
        @param[in] RelPos
        @param[in] group """
        pass
    
    def RemoveOperation(self, RelPos, group):
        """! RemoveOperation
        @param[in] RelPos
        @param[in] group """
        pass
    
class OperationVariables:
    """! IOperation Variables Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.GetAll=GetAll()
    def AddOperationVariable(self, variableID, shortName, longName, vt, vdecplaces, minval, maxval, defval, formula, canBeEmpty, operationReference):
        """! Add operation variable
        @param[in] variableID
        @param[in] shortName
        @param[in] longName
        @param[in] vt
        @param[in] vdecplaces
        @param[in] minval
        @param[in] maxval
        @param[in] defval
        @param[in] formula
        @param[in] canBeEmpty
        @param[in] operationReference """
        pass
    
    def RemoveOperationVariable(self, variableID):
        """! Remove operation variable
        @param[in] variableID """
        pass
    
    def GetOperationVariable(self, variableID):
        """! Get operation variable by key
        @param[in] variableID """
        pass
    
class Functions:
    """! IFunctions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.CrFunctions=CrFunctions()
        self.PrTSkimMatrixSettings=PrTSkimMatrixSettings()
        self.PrTVolumesParameters=PrTVolumesParameters()
        self.ImpedanceParameters=ImpedanceParameters()
        self.PuTSkimMatrixSettings=PuTSkimMatrixSettings()
        self.PuTVolumesParameters=PuTVolumesParameters()
        self.RemoteOperationFlowParameters=RemoteOperationFlowParameters()
        self.PuTRevenuesParameters=PuTRevenuesParameters()
        self.PathSequenceSkimMatrixSettings=PathSequenceSkimMatrixSettings()
        self.NodeImpedancePara=NodeImpedancePara()
        self.PrTGeneralParameters=PrTGeneralParameters()
        self.AnalysisTimes=AnalysisTimes()
        self.BlockingBackParameters=BlockingBackParameters()
        self.VolumeMatrixParameters=VolumeMatrixParameters()
    def VolumesParameters(self, dSegCode):
        """! Get Volumes Parameters
        @param[in] dSegCode """
        pass
    
    def ImpedanceFunctions(self, TSysCode):
        """! Get Impedance Functions
        @param[in] TSysCode """
        pass
    
class NetworkUserPreferences:
    """! INetworkUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        self.NetReadRouteSearchDefaults=NetReadRouteSearchDefaults()
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class TelemetryUserPreferences:
    """! ITelemetryUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class EnvironmentUserPreferences:
    """! IEnvironmentUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class FileAndProtocolUserPreferences:
    """! IFileAndProtocolUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class GUIUserPreferences:
    """! IGUIUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class FormatUserPreferences:
    """! IFormatUserPreferences Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class GetPuTTransferListParameters:
    """! IPuTTransferListPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetLineHierarchySourceFilter(self, LineHierarchyObjects):
        """! Set line hierarchy filter for source
        @param[in] LineHierarchyObjects """
        pass
    
    def SetLineHierarchyDestinationFilter(self, LineHierarchyObjects):
        """! Set line hierarchy filter for destination
        @param[in] LineHierarchyObjects """
        pass
    
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SetStopFilter(self, Stops):
        """! Set stop filter
        @param[in] Stops """
        pass
    
class Iterator:
    """! IIterator Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Active=Active()
        self.Item=Item()
        self.Valid=Valid()
    def Next(self):
        """! Advance the iterator to the next element """
        pass
    
    def Reset(self):
        """! Reset the iterator to its initial state """
        pass
    
class GroupGPA:
    """! ITurnGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Display=Display()
        self.Layers=Layers()
        self.TurnVolumes=TurnVolumes()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class GPA:
    """! IMainZoneGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Chart=Chart()
        self.Display=Display()
        self.DrawingOrder=DrawingOrder()
        self.Table=Table()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class GetLineRouteDisaggregationParameters:
    """! ILineRouteDisaggregationPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class GetLineRouteAggregationParameters:
    """! ILineRouteAggregationPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
class RouteCourses:
    """! IRouteCourseGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Display=Display()
        self.Grouping=Grouping()
        self.Label=Label()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class TransferRelations:
    """! ITransferRelationGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Items=Items()
        self.General=General()
        self.Layers=Layers()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class BaseMap:
    """! INetEditorBaseMapGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class POIs:
    """! IPOIGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Connections=Connections()
        self.Default=Default()
        self.Categories=Categories()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class DesireLinesMainZones:
    """! IDesireLineMainZoneGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Items=Items()
        self.General=General()
        self.Layers=Layers()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class PathSequenceItem:
    """! IPathSequenceItemGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Zone=Zone()
        self.Arc=Arc()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class DesireLinesZones:
    """! IDesireLineZoneGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Items=Items()
        self.General=General()
        self.Layers=Layers()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class StopCatchmentAreas:
    """! IStopCatchmentAreaGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Display=Display()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class GISObjects:
    """! IGISObjectGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Categories=Categories()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class GraphicTools:
    """! IGraphicToolGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class LayerParameters:
    """! INetEditorLayerParameters Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Layers=Layers()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class LaneAllocation:
    """! ILaneAllocationGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Display=Display()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class Base:
    """! INetEditor2DBaseGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class LegendGeneralParameters:
    """! ILegendGeneralParameters Interface """

    def __init__(self):
        """Contains all attributes"""
        self.LabelTextParameters=LabelTextParameters()
        self.FrameStyle=FrameStyle()
        self.AttributeTextParameters=AttributeTextParameters()
        self.GraphicScaleTextParameters=GraphicScaleTextParameters()
        self.SubElementTextParameters=SubElementTextParameters()
        self.PrintFrameFooter=PrintFrameFooter()
        self.FooterTextParameters=FooterTextParameters()
        self.TitleTextParameters=TitleTextParameters()
        self.ElementTextParameters=ElementTextParameters()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class LegendElementsParameters:
    """! ILegendElementParametersCont Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Iterator=Iterator()
        self.GetAll=GetAll()
        self.Attributes=Attributes()
        self.Count=Count()
    def Item(self, Index):
        """! Get item by index
        @param[in] Index """
        pass
    
    def ItemByKey(self, ID, key):
        """! Get element by ID and key
        @param[in] ID
        @param[in] key """
        pass
    
    def RemoveAll(self, OnlyActive):
        """! Remove all objects
        @param[in] OnlyActive """
        pass
    
    def GetMultipleAttributes(self, AttrIDs, OnlyActive):
        """! Get values of multiple attributes
        @param[in] AttrIDs
        @param[in] OnlyActive """
        pass
    
    def GetMultiAttValues(self, Attribut, OnlyActive):
        """! Get all attribute values
        @param[in] Attribut
        @param[in] OnlyActive """
        pass
    
    def AskAttribute(self, editableOnly, numericOnly, allowMultiSelection, defaultID, mask, attrCategories, specialFirstEntry):
        """! Display attribute selection dialog
        @param[in] editableOnly
        @param[in] numericOnly
        @param[in] allowMultiSelection
        @param[in] defaultID
        @param[in] mask
        @param[in] attrCategories
        @param[in] specialFirstEntry """
        pass
    
class PrintFrame:
    """! IPrintFrameGPar Interface """

    def __init__(self):
        """Contains all attributes"""
        self.Footer=Footer()
        self.Header=Header()
        self.BorderStyle=BorderStyle()
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class PrintArea:
    """! IPrintArea Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class Contents:
    """! IPrintContents Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class PageSetup:
    """! IPrintPageSetup Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def AttValue(self, Attribute):
        """! Set attribute value
        @param[in] Attribute """
        pass
    
    def OpenXml(self, FileName):
        """! Open XML file selectively
        @param[in] FileName """
        pass
    
    def SetAttValue(self, Attribute, arg1):
        """! Set attribute value
        @param[in] Attribute
        @param[in] arg1 """
        pass
    
    def SaveXml(self, FileName):
        """! Save XML file selectively
        @param[in] FileName """
        pass
    
class DefaultLineSelectionAndStopSequence:
    """! ILineSelectionAndStopSequence Interface """

    def __init__(self):
        """Contains all attributes"""
        self.OnlyActiveStopsOrStopPoints=OnlyActiveStopsOrStopPoints()
        self.StopSequenceIsEditable=StopSequenceIsEditable()
        self.DefaultCalculationMode=DefaultCalculationMode()
        self.HideUnservedStops=HideUnservedStops()
        self.GetStopSequence=GetStopSequence()
        self.StopLevel=StopLevel()
    def DeallocateLineRoutes(self):
        """! Remove all line route allocations """
        pass
    
    def RemoveMappings(self, lrItem):
        """! Remove mappings for line route item
        @param[in] lrItem """
        pass
    
    def ClearLineSelection(self):
        """! Clear line selection """
        pass
    
    def CalculateStopSeqAndLineSelFromNeteditorMarking(self, replaceLineSelection, Parameters):
        """! Calculate line selection and stop sequence from current neteditor marking
        @param[in] replaceLineSelection
        @param[in] Parameters """
        pass
    
    def SelectLinesFromStopSequence(self, OnlyActive, onlyServedStops, considerOrder, bothDirections, minNumCommonStops):
        """! Add line routes to line selection matching current stop sequence
        @param[in] OnlyActive
        @param[in] onlyServedStops
        @param[in] considerOrder
        @param[in] bothDirections
        @param[in] minNumCommonStops """
        pass
    
    def InvertStopSequence(self):
        """! Turn stop sequence around """
        pass
    
    def CreateStopSequenceFromMarkingParameters(self):
        """! Create line selection from marking parameters object """
        pass
    
    def RemoveZigZag(self):
        """! Remove simple zig zags """
        pass
    
    def ShowDirection(self, Direction, Show):
        """! Show time profiles belonging to given direction
        @param[in] Direction
        @param[in] Show """
        pass
    
    def SetLineSelection(self, NetElms):
        """! Set line selection to given line hierarchy objects
        @param[in] NetElms """
        pass
    
    def CalculateStopSequenceFromLineSelection(self):
        """! Calculate stop sequence based on current line selection """
        pass
    
    def RemoveFromStopSequence(self, Item):
        """! Remove stop sequence item from stop sequence
        @param[in] Item """
        pass
    
    def AddMapping(self, stopSequenceItem, lrItem, allowTwinMapping):
        """! Add mapping for line route item at stop sequence item
        @param[in] stopSequenceItem
        @param[in] lrItem
        @param[in] allowTwinMapping """
        pass
    
    def AllocateLineRoutes(self):
        """! Allocate line routes from line selection to stop sequence """
        pass
    
    def ClearStopSequence(self, keepActive):
        """! Clear stop sequence and allocations (optionally keeping active stops or stop points
        @param[in] keepActive """
        pass
    
    def AppendToStopSequence(self, Stop):
        """! Append stop sequence item to stop sequence
        @param[in] Stop """
        pass
    
class DefaultBlockSelection:
    """! IBlockSelection Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetBlockSelectionFromLineSelection(self, lineSelection, visibleObjectsOnly):
        """! Set Block selection according to line selection
        @param[in] lineSelection
        @param[in] visibleObjectsOnly """
        pass
    
    def SetBlockSelection(self, NetElms):
        """! Set block selection
        @param[in] NetElms """
        pass
    
class BlockSelection:
    """! IBlockSelection Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetBlockSelectionFromLineSelection(self, lineSelection, visibleObjectsOnly):
        """! Set Block selection according to line selection
        @param[in] lineSelection
        @param[in] visibleObjectsOnly """
        pass
    
    def SetBlockSelection(self, NetElms):
        """! Set block selection
        @param[in] NetElms """
        pass
    
class LineSelectionAndStopSequence:
    """! ILineSelectionAndStopSequence Interface """

    def __init__(self):
        """Contains all attributes"""
        self.OnlyActiveStopsOrStopPoints=OnlyActiveStopsOrStopPoints()
        self.StopSequenceIsEditable=StopSequenceIsEditable()
        self.DefaultCalculationMode=DefaultCalculationMode()
        self.HideUnservedStops=HideUnservedStops()
        self.GetStopSequence=GetStopSequence()
        self.StopLevel=StopLevel()
    def DeallocateLineRoutes(self):
        """! Remove all line route allocations """
        pass
    
    def RemoveMappings(self, lrItem):
        """! Remove mappings for line route item
        @param[in] lrItem """
        pass
    
    def ClearLineSelection(self):
        """! Clear line selection """
        pass
    
    def CalculateStopSeqAndLineSelFromNeteditorMarking(self, replaceLineSelection, Parameters):
        """! Calculate line selection and stop sequence from current neteditor marking
        @param[in] replaceLineSelection
        @param[in] Parameters """
        pass
    
    def SelectLinesFromStopSequence(self, OnlyActive, onlyServedStops, considerOrder, bothDirections, minNumCommonStops):
        """! Add line routes to line selection matching current stop sequence
        @param[in] OnlyActive
        @param[in] onlyServedStops
        @param[in] considerOrder
        @param[in] bothDirections
        @param[in] minNumCommonStops """
        pass
    
    def InvertStopSequence(self):
        """! Turn stop sequence around """
        pass
    
    def CreateStopSequenceFromMarkingParameters(self):
        """! Create line selection from marking parameters object """
        pass
    
    def RemoveZigZag(self):
        """! Remove simple zig zags """
        pass
    
    def ShowDirection(self, Direction, Show):
        """! Show time profiles belonging to given direction
        @param[in] Direction
        @param[in] Show """
        pass
    
    def SetLineSelection(self, NetElms):
        """! Set line selection to given line hierarchy objects
        @param[in] NetElms """
        pass
    
    def CalculateStopSequenceFromLineSelection(self):
        """! Calculate stop sequence based on current line selection """
        pass
    
    def RemoveFromStopSequence(self, Item):
        """! Remove stop sequence item from stop sequence
        @param[in] Item """
        pass
    
    def AddMapping(self, stopSequenceItem, lrItem, allowTwinMapping):
        """! Add mapping for line route item at stop sequence item
        @param[in] stopSequenceItem
        @param[in] lrItem
        @param[in] allowTwinMapping """
        pass
    
    def AllocateLineRoutes(self):
        """! Allocate line routes from line selection to stop sequence """
        pass
    
    def ClearStopSequence(self, keepActive):
        """! Clear stop sequence and allocations (optionally keeping active stops or stop points
        @param[in] keepActive """
        pass
    
    def AppendToStopSequence(self, Stop):
        """! Append stop sequence item to stop sequence
        @param[in] Stop """
        pass
    
class NodeChainPuT:
    """! INetElements Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetAll=GetAll()
        self.Count=Count()
    def TSysSetFromItem(self, Index):
        """! TSysSet for object
        @param[in] Index """
        pass
    
    def Item(self, Index):
        """! Access to network objects
        @param[in] Index """
        pass
    
    def Add(self, NetElm, TSysSetVar):
        """! Insert new object
        @param[in] NetElm
        @param[in] TSysSetVar """
        pass
    
class NodeChainPrT:
    """! INetElements Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetAll=GetAll()
        self.Count=Count()
    def TSysSetFromItem(self, Index):
        """! TSysSet for object
        @param[in] Index """
        pass
    
    def Item(self, Index):
        """! Access to network objects
        @param[in] Index """
        pass
    
    def Add(self, NetElm, TSysSetVar):
        """! Insert new object
        @param[in] NetElm
        @param[in] TSysSetVar """
        pass
    
class CrFunctions:
    """! ICrFunctions Interface """

    def __init__(self):
        """Contains all attributes"""
        self.ConnectorCrFunction=ConnectorCrFunction()
    def CrFunction(self, no):
        """! Get CR-Function
        @param[in] no """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class PrTSkimMatrixSettings:
    """! IPrTSkimMatrixSettings Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def UdfSkimMatrixLinComb(self, NetElemType):
        """! Get UDF SkimMatrix Lincomb
        @param[in] NetElemType """
        pass
    
    def SingleSkimMatrixSettings(self, skimMatName):
        """! Get prt skim matrix settings for skim
        @param[in] skimMatName """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class PrTVolumesParameters:
    """! IPrTVolumesPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class ImpedanceParameters:
    """! IImpedancePara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class PuTSkimMatrixSettings:
    """! IPuTSkimMatrixSettings Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SingleSkimMatrixSettings(self, skimMatName):
        """! Get put skim matrix settings for skim
        @param[in] skimMatName """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class PuTVolumesParameters:
    """! IPuTVolumesPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class RemoteOperationFlowParameters:
    """! IRemoteOperationFlowPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class PuTRevenuesParameters:
    """! IPuTRevenuesPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class PathSequenceSkimMatrixSettings:
    """! IPathSequenceSkimMatrixSettings Interface """

    def __init__(self):
        """Contains all attributes"""
        self.GetAll=GetAll()
    def RemoveSingleSkimMatrixSettings(self, skimMatCode):
        """! Remove item
        @param[in] skimMatCode """
        pass
    
    def RemoveAll(self):
        """! Remove all objects """
        pass
    
    def SingleSkimMatrixSettings(self, skimMatCode):
        """! Get item by key
        @param[in] skimMatCode """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
    def AddSingleSkimMatrixSettings(self, skimMatCode):
        """! Insert item
        @param[in] skimMatCode """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class NodeImpedancePara:
    """! INodeImpedancePara Interface """

    def __init__(self):
        """Contains all attributes"""
        self.UncontrolledJunctionCrFunction=UncontrolledJunctionCrFunction()
        self.TurnCrFunctions=TurnCrFunctions()
        self.NodeCrFunctions=NodeCrFunctions()
    def NodeCrFunction(self, no):
        """! Get CR-Function for node type
        @param[in] no """
        pass
    
    def TurnCrFunction(self, no):
        """! Get CR-Function for turn type
        @param[in] no """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class PrTGeneralParameters:
    """! IPrTGeneralPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class AnalysisTimes:
    """! ICalendarPeriod Interface """

    def __init__(self):
        """Contains all attributes"""
        self.NumTimeIntervals=NumTimeIntervals()
        self.Active=Active()
        self.CurrentTimeInterval=CurrentTimeInterval()
        self.AnalysisTimeIntervalSet=AnalysisTimeIntervalSet()
    def TimeInterval(self, AnalysisTimeIntervalCodeOrIndex1Based):
        """! Get analysis time interval
        @param[in] AnalysisTimeIntervalCodeOrIndex1Based """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
class BlockingBackParameters:
    """! IBlockingBackPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class VolumeMatrixParameters:
    """! IVolumeMatrixPara Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Save attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Save attribute value
        @param[in] Attribut """
        pass
    
class NetReadRouteSearchDefaults:
    """! INetReadRouteSearchTSys Interface """

    def __init__(self):
        """Contains all attributes"""
        pass
    def SetAttValue(self, Attribut, arg1):
        """! Set attribute value
        @param[in] Attribut
        @param[in] arg1 """
        pass
    
    def AttValue(self, Attribut):
        """! Set attribute value
        @param[in] Attribut """
        pass
    
# ==== additional properties ==== 
# properties are either no COM object or couldn't be translated into the node structure 

class GetAllAliases:
    """! this is a property"""

    pass

class ObjectType:
    """! this is a property"""

    pass

class GetAll:
    """! this is a property"""

    pass

class ConnectorCrFunction:
    """! this is a property"""

    pass

class SynchroMode:
    """! this is a property"""

    pass

class Footer:
    """! this is a property"""

    pass

class Default:
    """! this is a property"""

    pass

class NumTimeIntervals:
    """! this is a property"""

    pass

class Attributes:
    """! this is a property"""

    pass

class ConditionDefined:
    """! this is a property"""

    pass

class OnlyActiveStopsOrStopPoints:
    """! this is a property"""

    pass

class TurnVolumes:
    """! this is a property"""

    pass

class AllowMultithreading:
    """! this is a property"""

    pass

class Iterator:
    """! this is a property"""

    pass

class Backup:
    """! this is a property"""

    pass

class VersionNumber:
    """! this is a property"""

    pass

class GraphicScaleTextParameters:
    """! this is a property"""

    pass

class IncludePOISubCategories:
    """! this is a property"""

    pass

class ProcessId:
    """! this is a property"""

    pass

class RestrictToPOICategory:
    """! this is a property"""

    pass

class Header:
    """! this is a property"""

    pass

class Categories:
    """! this is a property"""

    pass

class InternalApi:
    """! this is a property"""

    pass

class CurrentVersionFile:
    """! this is a property"""

    pass

class Arc:
    """! this is a property"""

    pass

class StopSequenceIsEditable:
    """! this is a property"""

    pass

class Table:
    """! this is a property"""

    pass

class ExportAllNumbersAsDoubles:
    """! this is a property"""

    pass

class Layers:
    """! this is a property"""

    pass

class IsSortable:
    """! this is a property"""

    pass

class Chart:
    """! this is a property"""

    pass

class MaxCount:
    """! this is a property"""

    pass

class Grouping:
    """! this is a property"""

    pass

class Label:
    """! this is a property"""

    pass

class LabelTextParameters:
    """! this is a property"""

    pass

class ShowOnlyRelevantVehJourneys:
    """! this is a property"""

    pass

class Zone:
    """! this is a property"""

    pass

class HideUnservedStops:
    """! this is a property"""

    pass

class General:
    """! this is a property"""

    pass

class MessageFileName:
    """! this is a property"""

    pass

class AttributeTextParameters:
    """! this is a property"""

    pass

class Items:
    """! this is a property"""

    pass

class TitleTextParameters:
    """! this is a property"""

    pass

class ElementTextParameters:
    """! this is a property"""

    pass

class StopLevel:
    """! this is a property"""

    pass

class CountActive:
    """! this is a property"""

    pass

class ShowVehicleJourneySectionCourse:
    """! this is a property"""

    pass

class NumColumns:
    """! this is a property"""

    pass

class Count:
    """! this is a property"""

    pass

class NodeCrFunctions:
    """! this is a property"""

    pass

class GetTableShortName:
    """! this is a property"""

    pass

class DocumentName:
    """! this is a property"""

    pass

class PrintFrameFooter:
    """! this is a property"""

    pass

class Display:
    """! this is a property"""

    pass

class Active:
    """! this is a property"""

    pass

class GetTableLongName:
    """! this is a property"""

    pass

class GetMultiFilterState:
    """! this is a property"""

    pass

class AcceptIncomingDuringOutgoingCalls:
    """! this is a property"""

    pass

class StopDrawing:
    """! this is a property"""

    pass

class Connections:
    """! this is a property"""

    pass

class DefaultCalculationMode:
    """! this is a property"""

    pass

class Item:
    """! this is a property"""

    pass

class FrameStyle:
    """! this is a property"""

    pass

class Valid:
    """! this is a property"""

    pass

class TurnCrFunctions:
    """! this is a property"""

    pass

class NumNetObjReferences:
    """! this is a property"""

    pass

class Embedded:
    """! this is a property"""

    pass

class InternalTests:
    """! this is a property"""

    pass

class FooterTextParameters:
    """! this is a property"""

    pass

class NumActiveElements:
    """! this is a property"""

    pass

class TraceFileName:
    """! this is a property"""

    pass

class BorderStyle:
    """! this is a property"""

    pass

class SubElementTextParameters:
    """! this is a property"""

    pass

class AnalysisTimeIntervalSet:
    """! this is a property"""

    pass

class DrawingOrder:
    """! this is a property"""

    pass

class CurrentTimeInterval:
    """! this is a property"""

    pass

class UncontrolledJunctionCrFunction:
    """! this is a property"""

    pass

class LogFileName:
    """! this is a property"""

    pass

class ActProtTraceLevel:
    """! this is a property"""

    pass

class DemandSegments:
    """! this is a property"""

    pass

class DecimalSeparator:
    """! this is a property"""

    pass

class IsExecuting:
    """! this is a property"""

    pass

class ShowOnlyActiveVehJourneys:
    """! this is a property"""

    pass

class ErrorFileName:
    """! this is a property"""

    pass

class SectionViewMode:
    """! this is a property"""

    pass

class GetAllActive:
    """! this is a property"""

    pass

class GetStopSequence:
    """! this is a property"""

    pass

class SaveUserPreferencesToRegistryOnClose:
    """! this is a property"""

    pass

class CurrentProject:
    """! this is a property"""

    pass

class Changed:
    """! this is a property"""

    pass
